{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { TreeCollection, filePathToTree } from '@zag-js/collection';\nimport { getByTypeahead, dataAttr, isComposingEvent, getEventTarget, isEditableElement, getEventKey, isModifierKey } from '@zag-js/dom-query';\nimport { first, uniq, diff, addOrRemove, toArray, remove, last, isEqual, add, ensure, createSplitProps } from '@zag-js/utils';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\n\n// src/tree-view.anatomy.ts\nvar anatomy = createAnatomy(\"tree-view\").parts(\"root\", \"label\", \"tree\", \"item\", \"itemIndicator\", \"itemText\", \"branch\", \"branchControl\", \"branchTrigger\", \"branchContent\", \"branchText\", \"branchIndicator\", \"branchIndentGuide\");\nvar parts = anatomy.build();\nvar collection = options => {\n  return new TreeCollection(options);\n};\ncollection.empty = () => {\n  return new TreeCollection({\n    rootNode: {\n      children: []\n    }\n  });\n};\nfunction filePathCollection(paths) {\n  return filePathToTree(paths);\n}\n\n// src/tree-view.dom.ts\nvar getRootId = ctx => ctx.ids?.root ?? `tree:${ctx.id}:root`;\nvar getLabelId = ctx => ctx.ids?.label ?? `tree:${ctx.id}:label`;\nvar getNodeId = (ctx, value) => ctx.ids?.node?.(value) ?? `tree:${ctx.id}:node:${value}`;\nvar getTreeId = ctx => ctx.ids?.tree ?? `tree:${ctx.id}:tree`;\nvar focusNode = (ctx, value) => {\n  if (value == null) return;\n  const nodeId = getNodeId(ctx, value);\n  ctx.getById(nodeId)?.focus({\n    preventScroll: true\n  });\n};\n\n// src/tree-view.connect.ts\nfunction connect(service, normalize) {\n  const {\n    context,\n    scope,\n    computed,\n    prop,\n    send\n  } = service;\n  const collection2 = prop(\"collection\");\n  const expandedValue = Array.from(context.get(\"expandedValue\"));\n  const selectedValue = Array.from(context.get(\"selectedValue\"));\n  const isTypingAhead = computed(\"isTypingAhead\");\n  const focusedValue = context.get(\"focusedValue\");\n  const loadingStatus = context.get(\"loadingStatus\");\n  function getNodeState(props2) {\n    const {\n      node,\n      indexPath\n    } = props2;\n    const value = collection2.getNodeValue(node);\n    return {\n      value,\n      indexPath,\n      valuePath: collection2.getValuePath(indexPath),\n      disabled: Boolean(node.disabled),\n      focused: focusedValue == null ? isEqual(indexPath, [0]) : focusedValue === value,\n      selected: selectedValue.includes(value),\n      expanded: expandedValue.includes(value),\n      loading: loadingStatus[value] === \"loading\",\n      depth: indexPath.length,\n      isBranch: collection2.isBranchNode(node)\n    };\n  }\n  return {\n    collection: collection2,\n    expandedValue,\n    selectedValue,\n    expand(value) {\n      send({\n        type: value ? \"BRANCH.EXPAND\" : \"EXPANDED.ALL\",\n        value\n      });\n    },\n    collapse(value) {\n      send({\n        type: value ? \"BRANCH.COLLAPSE\" : \"EXPANDED.SET\",\n        value\n      });\n    },\n    deselect(value) {\n      send({\n        type: value ? \"NODE.DESELECT\" : \"SELECTED.SET\",\n        value\n      });\n    },\n    select(value) {\n      send({\n        type: value ? \"NODE.SELECT\" : \"SELECTED.ALL\",\n        value\n      });\n    },\n    getVisibleNodes() {\n      return computed(\"visibleNodes\").map(({\n        node\n      }) => node);\n    },\n    focus(value) {\n      focusNode(scope, value);\n    },\n    selectParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _selectedValue = add(selectedValue, collection2.getNodeValue(parentNode));\n      send({\n        type: \"SELECTED.SET\",\n        value: _selectedValue,\n        src: \"select.parent\"\n      });\n    },\n    expandParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _expandedValue = add(expandedValue, collection2.getNodeValue(parentNode));\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue,\n        src: \"expand.parent\"\n      });\n    },\n    setExpandedValue(value) {\n      const _expandedValue = uniq(value);\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue\n      });\n    },\n    setSelectedValue(value) {\n      const _selectedValue = uniq(value);\n      send({\n        type: \"SELECTED.SET\",\n        value: _selectedValue\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: getRootId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        id: getLabelId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getTreeProps() {\n      return normalize.element({\n        ...parts.tree.attrs,\n        id: getTreeId(scope),\n        dir: prop(\"dir\"),\n        role: \"tree\",\n        \"aria-label\": \"Tree View\",\n        \"aria-labelledby\": getLabelId(scope),\n        \"aria-multiselectable\": prop(\"selectionMode\") === \"multiple\" || void 0,\n        tabIndex: -1,\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          const target = getEventTarget(event);\n          if (isEditableElement(target)) return;\n          const node = target?.closest(\"[data-part=branch-control], [data-part=item]\");\n          if (!node) return;\n          const nodeId = node.dataset.value;\n          if (nodeId == null) {\n            console.warn(`[zag-js/tree-view] Node id not found for node`, node);\n            return;\n          }\n          const isBranchNode = node.matches(\"[data-part=branch-control]\");\n          const keyMap = {\n            ArrowDown(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.ARROW_DOWN\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            ArrowUp(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.ARROW_UP\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            ArrowLeft(event2) {\n              if (isModifierKey(event2) || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: isBranchNode ? \"BRANCH_NODE.ARROW_LEFT\" : \"NODE.ARROW_LEFT\",\n                id: nodeId\n              });\n            },\n            ArrowRight(event2) {\n              if (!isBranchNode || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"BRANCH_NODE.ARROW_RIGHT\",\n                id: nodeId\n              });\n            },\n            Home(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.HOME\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            End(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.END\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            Space(event2) {\n              if (node.dataset.disabled) return;\n              if (isTypingAhead) {\n                send({\n                  type: \"TREE.TYPEAHEAD\",\n                  key: event2.key\n                });\n              } else {\n                keyMap.Enter?.(event2);\n              }\n            },\n            Enter(event2) {\n              if (node.dataset.disabled) return;\n              const isLink = target?.closest(\"a[href]\");\n              if (!isLink) event2.preventDefault();\n              send({\n                type: isBranchNode ? \"BRANCH_NODE.CLICK\" : \"NODE.CLICK\",\n                id: nodeId,\n                src: \"keyboard\"\n              });\n            },\n            \"*\"(event2) {\n              if (node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"SIBLINGS.EXPAND\",\n                id: nodeId\n              });\n            },\n            a(event2) {\n              if (!event2.metaKey || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"SELECTED.ALL\",\n                moveFocus: true\n              });\n            }\n          };\n          const key = getEventKey(event, {\n            dir: prop(\"dir\")\n          });\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            return;\n          }\n          if (!isTypingAhead) return;\n          const isValidTypeahead = event.key.length === 1 && !isModifierKey(event);\n          if (!isValidTypeahead) return;\n          send({\n            type: \"TREE.TYPEAHEAD\",\n            key: event.key,\n            id: nodeId\n          });\n          event.preventDefault();\n        }\n      });\n    },\n    getNodeState,\n    getItemProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.item.attrs,\n        id: getNodeId(scope, itemState.value),\n        dir: prop(\"dir\"),\n        \"data-ownedby\": getTreeId(scope),\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": itemState.value,\n        tabIndex: itemState.focused ? 0 : -1,\n        \"data-focus\": dataAttr(itemState.focused),\n        role: \"treeitem\",\n        \"aria-current\": itemState.selected ? \"true\" : void 0,\n        \"aria-selected\": itemState.disabled ? void 0 : itemState.selected,\n        \"data-selected\": dataAttr(itemState.selected),\n        \"aria-disabled\": itemState.disabled,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"aria-level\": itemState.depth,\n        \"data-depth\": itemState.depth,\n        style: {\n          \"--depth\": itemState.depth\n        },\n        onFocus(event) {\n          event.stopPropagation();\n          send({\n            type: \"NODE.FOCUS\",\n            id: itemState.value\n          });\n        },\n        onClick(event) {\n          if (itemState.disabled) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({\n            type: \"NODE.CLICK\",\n            id: itemState.value,\n            shiftKey: event.shiftKey,\n            ctrlKey: isMetaKey\n          });\n          event.stopPropagation();\n          const isLink = event.currentTarget.matches(\"a[href]\");\n          if (!isLink) event.preventDefault();\n        }\n      });\n    },\n    getItemTextProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemText.attrs,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused)\n      });\n    },\n    getItemIndicatorProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused),\n        hidden: !itemState.selected\n      });\n    },\n    getBranchProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branch.attrs,\n        \"data-depth\": nodeState.depth,\n        dir: prop(\"dir\"),\n        \"data-branch\": nodeState.value,\n        role: \"treeitem\",\n        \"data-ownedby\": getTreeId(scope),\n        \"data-value\": nodeState.value,\n        \"aria-level\": nodeState.depth,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-expanded\": nodeState.expanded,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"aria-disabled\": nodeState.disabled,\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-loading\": dataAttr(nodeState.loading),\n        \"aria-busy\": nodeState.loading,\n        style: {\n          \"--depth\": nodeState.depth\n        }\n      });\n    },\n    getBranchIndicatorProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-loading\": dataAttr(nodeState.loading)\n      });\n    },\n    getBranchTriggerProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchTrigger.attrs,\n        role: \"button\",\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-value\": nodeState.value,\n        \"data-loading\": dataAttr(nodeState.loading),\n        disabled: nodeState.loading,\n        onClick(event) {\n          if (nodeState.disabled || nodeState.loading) return;\n          send({\n            type: \"BRANCH_TOGGLE.CLICK\",\n            id: nodeState.value\n          });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchControlProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchControl.attrs,\n        role: \"button\",\n        id: getNodeId(scope, nodeState.value),\n        dir: prop(\"dir\"),\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-value\": nodeState.value,\n        \"data-depth\": nodeState.depth,\n        \"data-loading\": dataAttr(nodeState.loading),\n        \"aria-busy\": nodeState.loading,\n        onFocus(event) {\n          send({\n            type: \"NODE.FOCUS\",\n            id: nodeState.value\n          });\n          event.stopPropagation();\n        },\n        onClick(event) {\n          if (nodeState.disabled || nodeState.loading) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({\n            type: \"BRANCH_NODE.CLICK\",\n            id: nodeState.value,\n            shiftKey: event.shiftKey,\n            ctrlKey: isMetaKey\n          });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchTextProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchText.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-loading\": dataAttr(nodeState.loading)\n      });\n    },\n    getBranchContentProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchContent.attrs,\n        role: \"group\",\n        dir: prop(\"dir\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-depth\": nodeState.depth,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        hidden: !nodeState.expanded\n      });\n    },\n    getBranchIndentGuideProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndentGuide.attrs,\n        \"data-depth\": nodeState.depth\n      });\n    }\n  };\n}\nvar {\n  and\n} = createGuards();\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    return {\n      selectionMode: \"single\",\n      collection: collection.empty(),\n      typeahead: true,\n      expandOnClick: true,\n      defaultExpandedValue: [],\n      defaultSelectedValue: [],\n      ...props2\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({\n    prop,\n    bindable,\n    getContext\n  }) {\n    return {\n      expandedValue: bindable(() => ({\n        defaultValue: prop(\"defaultExpandedValue\"),\n        value: prop(\"expandedValue\"),\n        isEqual: isEqual,\n        onChange(value) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onExpandedChange\")?.({\n            expandedValue: value,\n            focusedValue\n          });\n        }\n      })),\n      selectedValue: bindable(() => ({\n        defaultValue: prop(\"defaultSelectedValue\"),\n        value: prop(\"selectedValue\"),\n        isEqual: isEqual,\n        onChange(value) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onSelectionChange\")?.({\n            selectedValue: value,\n            focusedValue\n          });\n        }\n      })),\n      focusedValue: bindable(() => ({\n        defaultValue: prop(\"focusedValue\"),\n        onChange(value) {\n          prop(\"onFocusChange\")?.({\n            focusedValue: value\n          });\n        }\n      })),\n      loadingStatus: bindable(() => ({\n        defaultValue: {}\n      }))\n    };\n  },\n  refs() {\n    return {\n      typeaheadState: {\n        ...getByTypeahead.defaultOptions\n      },\n      pendingAborts: /* @__PURE__ */new Map()\n    };\n  },\n  computed: {\n    isMultipleSelection: ({\n      prop\n    }) => prop(\"selectionMode\") === \"multiple\",\n    isTypingAhead: ({\n      refs\n    }) => refs.get(\"typeaheadState\").keysSoFar.length > 0,\n    visibleNodes: ({\n      prop,\n      context\n    }) => {\n      const nodes = [];\n      prop(\"collection\").visit({\n        skip: skipFn({\n          prop,\n          context\n        }),\n        onEnter: (node, indexPath) => {\n          nodes.push({\n            node,\n            indexPath\n          });\n        }\n      });\n      return nodes;\n    }\n  },\n  on: {\n    \"EXPANDED.SET\": {\n      actions: [\"setExpanded\"]\n    },\n    \"EXPANDED.ALL\": {\n      actions: [\"expandAllBranches\"]\n    },\n    \"BRANCH.EXPAND\": {\n      actions: [\"expandBranches\"]\n    },\n    \"BRANCH.COLLAPSE\": {\n      actions: [\"collapseBranches\"]\n    },\n    \"SELECTED.SET\": {\n      actions: [\"setSelected\"]\n    },\n    \"SELECTED.ALL\": [{\n      guard: and(\"isMultipleSelection\", \"moveFocus\"),\n      actions: [\"selectAllNodes\", \"focusTreeLastNode\"]\n    }, {\n      guard: \"isMultipleSelection\",\n      actions: [\"selectAllNodes\"]\n    }],\n    \"NODE.SELECT\": {\n      actions: [\"selectNode\"]\n    },\n    \"NODE.DESELECT\": {\n      actions: [\"deselectNode\"]\n    }\n  },\n  exit: [\"clearPendingAborts\"],\n  states: {\n    idle: {\n      on: {\n        \"NODE.FOCUS\": {\n          actions: [\"setFocusedNode\"]\n        },\n        \"NODE.ARROW_DOWN\": [{\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"focusTreeNextNode\", \"extendSelectionToNextNode\"]\n        }, {\n          actions: [\"focusTreeNextNode\"]\n        }],\n        \"NODE.ARROW_UP\": [{\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"focusTreePrevNode\", \"extendSelectionToPrevNode\"]\n        }, {\n          actions: [\"focusTreePrevNode\"]\n        }],\n        \"NODE.ARROW_LEFT\": {\n          actions: [\"focusBranchNode\"]\n        },\n        \"BRANCH_NODE.ARROW_LEFT\": [{\n          guard: \"isBranchExpanded\",\n          actions: [\"collapseBranch\"]\n        }, {\n          actions: [\"focusBranchNode\"]\n        }],\n        \"BRANCH_NODE.ARROW_RIGHT\": [{\n          guard: and(\"isBranchFocused\", \"isBranchExpanded\"),\n          actions: [\"focusBranchFirstNode\"]\n        }, {\n          actions: [\"expandBranch\"]\n        }],\n        \"SIBLINGS.EXPAND\": {\n          actions: [\"expandSiblingBranches\"]\n        },\n        \"NODE.HOME\": [{\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"extendSelectionToFirstNode\", \"focusTreeFirstNode\"]\n        }, {\n          actions: [\"focusTreeFirstNode\"]\n        }],\n        \"NODE.END\": [{\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"extendSelectionToLastNode\", \"focusTreeLastNode\"]\n        }, {\n          actions: [\"focusTreeLastNode\"]\n        }],\n        \"NODE.CLICK\": [{\n          guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n          actions: [\"toggleNodeSelection\"]\n        }, {\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"extendSelectionToNode\"]\n        }, {\n          actions: [\"selectNode\"]\n        }],\n        \"BRANCH_NODE.CLICK\": [{\n          guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n          actions: [\"toggleNodeSelection\"]\n        }, {\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"extendSelectionToNode\"]\n        }, {\n          guard: \"openOnClick\",\n          actions: [\"selectNode\", \"toggleBranchNode\"]\n        }, {\n          actions: [\"selectNode\"]\n        }],\n        \"BRANCH_TOGGLE.CLICK\": {\n          actions: [\"toggleBranchNode\"]\n        },\n        \"TREE.TYPEAHEAD\": {\n          actions: [\"focusMatchedNode\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      isBranchFocused: ({\n        context,\n        event\n      }) => context.get(\"focusedValue\") === event.id,\n      isBranchExpanded: ({\n        context,\n        event\n      }) => context.get(\"expandedValue\").includes(event.id),\n      isShiftKey: ({\n        event\n      }) => event.shiftKey,\n      isCtrlKey: ({\n        event\n      }) => event.ctrlKey,\n      hasSelectedItems: ({\n        context\n      }) => context.get(\"selectedValue\").length > 0,\n      isMultipleSelection: ({\n        prop\n      }) => prop(\"selectionMode\") === \"multiple\",\n      moveFocus: ({\n        event\n      }) => !!event.moveFocus,\n      openOnClick: ({\n        prop\n      }) => !!prop(\"expandOnClick\")\n    },\n    actions: {\n      selectNode({\n        context,\n        event,\n        prop\n      }) {\n        const value = toArray(event.id || event.value);\n        context.set(\"selectedValue\", prev => {\n          if (prop(\"selectionMode\") === \"single\") {\n            return [last(value)].filter(Boolean);\n          } else {\n            return uniq([...prev, ...value]);\n          }\n        });\n      },\n      deselectNode({\n        context,\n        event\n      }) {\n        const value = toArray(event.id || event.value);\n        context.set(\"selectedValue\", prev => remove(prev, ...value));\n      },\n      setFocusedNode({\n        context,\n        event\n      }) {\n        context.set(\"focusedValue\", event.id);\n      },\n      clearFocusedNode({\n        context\n      }) {\n        context.set(\"focusedValue\", null);\n      },\n      clearSelectedItem({\n        context\n      }) {\n        context.set(\"selectedValue\", []);\n      },\n      toggleBranchNode({\n        context,\n        event,\n        action\n      }) {\n        const isExpanded = context.get(\"expandedValue\").includes(event.id);\n        action(isExpanded ? [\"collapseBranch\"] : [\"expandBranch\"]);\n      },\n      expandBranch(params) {\n        const {\n          event\n        } = params;\n        expandBranches(params, [event.id]);\n      },\n      expandBranches(params) {\n        const {\n          context,\n          event\n        } = params;\n        const valuesToExpand = toArray(event.value);\n        expandBranches(params, diff(valuesToExpand, context.get(\"expandedValue\")));\n      },\n      collapseBranch({\n        context,\n        event\n      }) {\n        context.set(\"expandedValue\", prev => remove(prev, event.id));\n      },\n      collapseBranches(params) {\n        const {\n          context,\n          event\n        } = params;\n        const value = toArray(event.value);\n        context.set(\"expandedValue\", prev => remove(prev, ...value));\n      },\n      setExpanded({\n        context,\n        event\n      }) {\n        context.set(\"expandedValue\", event.value);\n      },\n      setSelected({\n        context,\n        event\n      }) {\n        context.set(\"selectedValue\", event.value);\n      },\n      focusTreeFirstNode({\n        prop,\n        scope\n      }) {\n        const collection2 = prop(\"collection\");\n        const firstNode = collection2.getFirstNode();\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeLastNode({\n        prop,\n        scope\n      }) {\n        const collection2 = prop(\"collection\");\n        const lastNode = collection2.getLastNode();\n        const lastValue = collection2.getNodeValue(lastNode);\n        focusNode(scope, lastValue);\n      },\n      focusBranchFirstNode({\n        event,\n        prop,\n        scope\n      }) {\n        const collection2 = prop(\"collection\");\n        const branchNode = collection2.findNode(event.id);\n        const firstNode = collection2.getFirstNode(branchNode);\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeNextNode(params) {\n        const {\n          event,\n          prop,\n          scope\n        } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!nextNode) return;\n        const nextValue = collection2.getNodeValue(nextNode);\n        focusNode(scope, nextValue);\n      },\n      focusTreePrevNode(params) {\n        const {\n          event,\n          prop,\n          scope\n        } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!prevNode) return;\n        const prevValue = collection2.getNodeValue(prevNode);\n        focusNode(scope, prevValue);\n      },\n      focusBranchNode({\n        event,\n        prop,\n        scope\n      }) {\n        const collection2 = prop(\"collection\");\n        const parentNode = collection2.getParentNode(event.id);\n        const parentValue = parentNode ? collection2.getNodeValue(parentNode) : void 0;\n        focusNode(scope, parentValue);\n      },\n      selectAllNodes({\n        context,\n        prop\n      }) {\n        context.set(\"selectedValue\", prop(\"collection\").getValues());\n      },\n      focusMatchedNode(params) {\n        const {\n          context,\n          prop,\n          refs,\n          event,\n          scope,\n          computed\n        } = params;\n        const nodes = computed(\"visibleNodes\");\n        const elements = nodes.map(({\n          node: node2\n        }) => ({\n          textContent: prop(\"collection\").stringifyNode(node2),\n          id: prop(\"collection\").getNodeValue(node2)\n        }));\n        const node = getByTypeahead(elements, {\n          state: refs.get(\"typeaheadState\"),\n          activeId: context.get(\"focusedValue\"),\n          key: event.key\n        });\n        focusNode(scope, node?.id);\n      },\n      toggleNodeSelection({\n        context,\n        event\n      }) {\n        const selectedValue = addOrRemove(context.get(\"selectedValue\"), event.id);\n        context.set(\"selectedValue\", selectedValue);\n      },\n      expandAllBranches(params) {\n        const {\n          context,\n          prop\n        } = params;\n        const branchValues = prop(\"collection\").getBranchValues();\n        const valuesToExpand = diff(branchValues, context.get(\"expandedValue\"));\n        expandBranches(params, valuesToExpand);\n      },\n      expandSiblingBranches(params) {\n        const {\n          context,\n          event,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const indexPath = collection2.getIndexPath(event.id);\n        if (!indexPath) return;\n        const nodes = collection2.getSiblingNodes(indexPath);\n        const values = nodes.map(node => collection2.getNodeValue(node));\n        const valuesToExpand = diff(values, context.get(\"expandedValue\"));\n        expandBranches(params, valuesToExpand);\n      },\n      extendSelectionToNode(params) {\n        const {\n          context,\n          event,\n          prop,\n          computed\n        } = params;\n        const collection2 = prop(\"collection\");\n        const anchorValue = first(context.get(\"selectedValue\")) || collection2.getNodeValue(collection2.getFirstNode());\n        const targetValue = event.id;\n        let values = [anchorValue, targetValue];\n        let hits = 0;\n        const visibleNodes = computed(\"visibleNodes\");\n        visibleNodes.forEach(({\n          node\n        }) => {\n          const nodeValue = collection2.getNodeValue(node);\n          if (hits === 1) values.push(nodeValue);\n          if (nodeValue === anchorValue || nodeValue === targetValue) hits++;\n        });\n        context.set(\"selectedValue\", uniq(values));\n      },\n      extendSelectionToNextNode(params) {\n        const {\n          context,\n          event,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!nextNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const nextValue = collection2.getNodeValue(nextNode);\n        if (nextValue == null) return;\n        if (values.has(event.id) && values.has(nextValue)) {\n          values.delete(event.id);\n        } else if (!values.has(nextValue)) {\n          values.add(nextValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToPrevNode(params) {\n        const {\n          context,\n          event,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!prevNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const prevValue = collection2.getNodeValue(prevNode);\n        if (prevValue == null) return;\n        if (values.has(event.id) && values.has(prevValue)) {\n          values.delete(event.id);\n        } else if (!values.has(prevValue)) {\n          values.add(prevValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToFirstNode(params) {\n        const {\n          context,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: node => {\n            const nodeValue = collection2.getNodeValue(node);\n            values.push(nodeValue);\n            if (nodeValue === currentSelection) {\n              return \"stop\";\n            }\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      extendSelectionToLastNode(params) {\n        const {\n          context,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        let current = false;\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: node => {\n            const nodeValue = collection2.getNodeValue(node);\n            if (nodeValue === currentSelection) current = true;\n            if (current) values.push(nodeValue);\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      clearPendingAborts({\n        refs\n      }) {\n        const aborts = refs.get(\"pendingAborts\");\n        aborts.forEach(abort => abort.abort());\n        aborts.clear();\n      }\n    }\n  }\n});\nfunction skipFn(params) {\n  const {\n    prop,\n    context\n  } = params;\n  return function skip({\n    indexPath\n  }) {\n    const paths = prop(\"collection\").getValuePath(indexPath).slice(0, -1);\n    return paths.some(value => !context.get(\"expandedValue\").includes(value));\n  };\n}\nfunction partition(array, predicate) {\n  const pass = [];\n  const fail = [];\n  array.forEach(value => {\n    if (predicate(value)) pass.push(value);else fail.push(value);\n  });\n  return [pass, fail];\n}\nfunction expandBranches(params, ids) {\n  const {\n    context,\n    prop,\n    refs\n  } = params;\n  if (!prop(\"loadChildren\")) {\n    context.set(\"expandedValue\", prev => uniq(add(prev, ...ids)));\n    return;\n  }\n  const [loadedValues, loadingValues] = partition(ids, id => context.get(\"loadingStatus\")[id] === \"loaded\");\n  if (loadedValues.length > 0) {\n    context.set(\"expandedValue\", prev => uniq(add(prev, ...loadedValues)));\n  }\n  if (loadingValues.length === 0) return;\n  const collection2 = prop(\"collection\");\n  const [nodeWithChildren, nodeWithoutChildren] = partition(loadingValues, id => {\n    const node = collection2.findNode(id);\n    return collection2.getNodeChildren(node).length > 0;\n  });\n  if (nodeWithChildren.length > 0) {\n    context.set(\"expandedValue\", prev => uniq(add(prev, ...nodeWithChildren)));\n  }\n  if (nodeWithoutChildren.length === 0) return;\n  context.set(\"loadingStatus\", prev => ({\n    ...prev,\n    ...nodeWithoutChildren.reduce((acc, id) => ({\n      ...acc,\n      [id]: \"loading\"\n    }), {})\n  }));\n  const nodesToLoad = nodeWithoutChildren.map(id => {\n    const indexPath = collection2.getIndexPath(id);\n    const valuePath = collection2.getValuePath(indexPath);\n    const node = collection2.findNode(id);\n    return {\n      id,\n      indexPath,\n      valuePath,\n      node\n    };\n  });\n  const pendingAborts = refs.get(\"pendingAborts\");\n  const loadChildren = prop(\"loadChildren\");\n  ensure(loadChildren, () => \"[zag-js/tree-view] `loadChildren` is required for async expansion\");\n  const proms = nodesToLoad.map(({\n    id,\n    indexPath,\n    valuePath,\n    node\n  }) => {\n    const existingAbort = pendingAborts.get(id);\n    if (existingAbort) {\n      existingAbort.abort();\n      pendingAborts.delete(id);\n    }\n    const abortController = new AbortController();\n    pendingAborts.set(id, abortController);\n    return loadChildren({\n      valuePath,\n      indexPath,\n      node,\n      signal: abortController.signal\n    });\n  });\n  Promise.allSettled(proms).then(results => {\n    const loadedValues2 = [];\n    const nextLoadingStatus = context.get(\"loadingStatus\");\n    let collection3 = prop(\"collection\");\n    results.forEach((result, index) => {\n      const {\n        id,\n        indexPath,\n        node\n      } = nodesToLoad[index];\n      if (result.status === \"fulfilled\") {\n        nextLoadingStatus[id] = \"loaded\";\n        loadedValues2.push(id);\n        collection3 = collection3.replace(indexPath, {\n          ...node,\n          children: result.value\n        });\n      } else {\n        pendingAborts.delete(id);\n        Reflect.deleteProperty(nextLoadingStatus, id);\n      }\n    });\n    context.set(\"loadingStatus\", nextLoadingStatus);\n    if (loadedValues2.length) {\n      context.set(\"expandedValue\", prev => uniq(add(prev, ...loadedValues2)));\n      prop(\"onLoadChildrenComplete\")?.({\n        collection: collection3\n      });\n    }\n  });\n}\nvar props = createProps()([\"ids\", \"collection\", \"dir\", \"expandedValue\", \"expandOnClick\", \"focusedValue\", \"getRootNode\", \"id\", \"onExpandedChange\", \"onFocusChange\", \"onSelectionChange\", \"selectedValue\", \"selectionMode\", \"typeahead\", \"defaultExpandedValue\", \"defaultSelectedValue\", \"onLoadChildrenComplete\", \"loadChildren\"]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"node\", \"indexPath\"]);\nvar splitItemProps = createSplitProps(itemProps);\nexport { anatomy, collection, connect, filePathCollection, itemProps, machine, props, splitItemProps, splitProps };","map":{"version":3,"names":["createAnatomy","TreeCollection","filePathToTree","getByTypeahead","dataAttr","isComposingEvent","getEventTarget","isEditableElement","getEventKey","isModifierKey","first","uniq","diff","addOrRemove","toArray","remove","last","isEqual","add","ensure","createSplitProps","createGuards","createMachine","createProps","anatomy","parts","build","collection","options","empty","rootNode","children","filePathCollection","paths","getRootId","ctx","ids","root","id","getLabelId","label","getNodeId","value","node","getTreeId","tree","focusNode","nodeId","getById","focus","preventScroll","connect","service","normalize","context","scope","computed","prop","send","collection2","expandedValue","Array","from","get","selectedValue","isTypingAhead","focusedValue","loadingStatus","getNodeState","props2","indexPath","getNodeValue","valuePath","getValuePath","disabled","Boolean","focused","selected","includes","expanded","loading","depth","length","isBranch","isBranchNode","expand","type","collapse","deselect","select","getVisibleNodes","map","selectParent","parentNode","getParentNode","_selectedValue","src","expandParent","_expandedValue","setExpandedValue","setSelectedValue","getRootProps","element","attrs","dir","getLabelProps","getTreeProps","role","tabIndex","onKeyDown","event","defaultPrevented","target","closest","dataset","console","warn","matches","keyMap","ArrowDown","event2","preventDefault","shiftKey","ArrowUp","ArrowLeft","ArrowRight","Home","End","Space","key","Enter","isLink","*","a","metaKey","moveFocus","exec","isValidTypeahead","getItemProps","itemState","item","join","style","onFocus","stopPropagation","onClick","isMetaKey","ctrlKey","currentTarget","getItemTextProps","itemText","getItemIndicatorProps","itemIndicator","hidden","getBranchProps","nodeState","branch","getBranchIndicatorProps","branchIndicator","getBranchTriggerProps","branchTrigger","getBranchControlProps","branchControl","getBranchTextProps","branchText","getBranchContentProps","branchContent","getBranchIndentGuideProps","branchIndentGuide","and","machine","props","selectionMode","typeahead","expandOnClick","defaultExpandedValue","defaultSelectedValue","initialState","bindable","getContext","defaultValue","onChange","refs","typeaheadState","defaultOptions","pendingAborts","Map","isMultipleSelection","keysSoFar","visibleNodes","nodes","visit","skip","skipFn","onEnter","push","on","actions","guard","exit","states","idle","implementations","guards","isBranchFocused","isBranchExpanded","isShiftKey","isCtrlKey","hasSelectedItems","openOnClick","selectNode","set","prev","filter","deselectNode","setFocusedNode","clearFocusedNode","clearSelectedItem","toggleBranchNode","action","isExpanded","expandBranch","params","expandBranches","valuesToExpand","collapseBranch","collapseBranches","setExpanded","setSelected","focusTreeFirstNode","firstNode","getFirstNode","firstValue","focusTreeLastNode","lastNode","getLastNode","lastValue","focusBranchFirstNode","branchNode","findNode","focusTreeNextNode","nextNode","getNextNode","nextValue","focusTreePrevNode","prevNode","getPreviousNode","prevValue","focusBranchNode","parentValue","selectAllNodes","getValues","focusMatchedNode","elements","node2","textContent","stringifyNode","state","activeId","toggleNodeSelection","expandAllBranches","branchValues","getBranchValues","expandSiblingBranches","getIndexPath","getSiblingNodes","values","extendSelectionToNode","anchorValue","targetValue","hits","forEach","nodeValue","extendSelectionToNextNode","Set","has","delete","extendSelectionToPrevNode","extendSelectionToFirstNode","currentSelection","extendSelectionToLastNode","current","clearPendingAborts","aborts","abort","clear","slice","some","partition","array","predicate","pass","fail","loadedValues","loadingValues","nodeWithChildren","nodeWithoutChildren","getNodeChildren","reduce","acc","nodesToLoad","loadChildren","proms","existingAbort","abortController","AbortController","signal","Promise","allSettled","then","results","loadedValues2","nextLoadingStatus","collection3","result","index","status","replace","Reflect","deleteProperty","splitProps","itemProps","splitItemProps"],"sources":["D:/Java F.S/medicine-reminder/frontend/node_modules/@zag-js/tree-view/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { TreeCollection, filePathToTree } from '@zag-js/collection';\nimport { getByTypeahead, dataAttr, isComposingEvent, getEventTarget, isEditableElement, getEventKey, isModifierKey } from '@zag-js/dom-query';\nimport { first, uniq, diff, addOrRemove, toArray, remove, last, isEqual, add, ensure, createSplitProps } from '@zag-js/utils';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\n\n// src/tree-view.anatomy.ts\nvar anatomy = createAnatomy(\"tree-view\").parts(\n  \"root\",\n  \"label\",\n  \"tree\",\n  \"item\",\n  \"itemIndicator\",\n  \"itemText\",\n  \"branch\",\n  \"branchControl\",\n  \"branchTrigger\",\n  \"branchContent\",\n  \"branchText\",\n  \"branchIndicator\",\n  \"branchIndentGuide\"\n);\nvar parts = anatomy.build();\nvar collection = (options) => {\n  return new TreeCollection(options);\n};\ncollection.empty = () => {\n  return new TreeCollection({ rootNode: { children: [] } });\n};\nfunction filePathCollection(paths) {\n  return filePathToTree(paths);\n}\n\n// src/tree-view.dom.ts\nvar getRootId = (ctx) => ctx.ids?.root ?? `tree:${ctx.id}:root`;\nvar getLabelId = (ctx) => ctx.ids?.label ?? `tree:${ctx.id}:label`;\nvar getNodeId = (ctx, value) => ctx.ids?.node?.(value) ?? `tree:${ctx.id}:node:${value}`;\nvar getTreeId = (ctx) => ctx.ids?.tree ?? `tree:${ctx.id}:tree`;\nvar focusNode = (ctx, value) => {\n  if (value == null) return;\n  const nodeId = getNodeId(ctx, value);\n  ctx.getById(nodeId)?.focus({ preventScroll: true });\n};\n\n// src/tree-view.connect.ts\nfunction connect(service, normalize) {\n  const { context, scope, computed, prop, send } = service;\n  const collection2 = prop(\"collection\");\n  const expandedValue = Array.from(context.get(\"expandedValue\"));\n  const selectedValue = Array.from(context.get(\"selectedValue\"));\n  const isTypingAhead = computed(\"isTypingAhead\");\n  const focusedValue = context.get(\"focusedValue\");\n  const loadingStatus = context.get(\"loadingStatus\");\n  function getNodeState(props2) {\n    const { node, indexPath } = props2;\n    const value = collection2.getNodeValue(node);\n    return {\n      value,\n      indexPath,\n      valuePath: collection2.getValuePath(indexPath),\n      disabled: Boolean(node.disabled),\n      focused: focusedValue == null ? isEqual(indexPath, [0]) : focusedValue === value,\n      selected: selectedValue.includes(value),\n      expanded: expandedValue.includes(value),\n      loading: loadingStatus[value] === \"loading\",\n      depth: indexPath.length,\n      isBranch: collection2.isBranchNode(node)\n    };\n  }\n  return {\n    collection: collection2,\n    expandedValue,\n    selectedValue,\n    expand(value) {\n      send({ type: value ? \"BRANCH.EXPAND\" : \"EXPANDED.ALL\", value });\n    },\n    collapse(value) {\n      send({ type: value ? \"BRANCH.COLLAPSE\" : \"EXPANDED.SET\", value });\n    },\n    deselect(value) {\n      send({ type: value ? \"NODE.DESELECT\" : \"SELECTED.SET\", value });\n    },\n    select(value) {\n      send({ type: value ? \"NODE.SELECT\" : \"SELECTED.ALL\", value });\n    },\n    getVisibleNodes() {\n      return computed(\"visibleNodes\").map(({ node }) => node);\n    },\n    focus(value) {\n      focusNode(scope, value);\n    },\n    selectParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _selectedValue = add(selectedValue, collection2.getNodeValue(parentNode));\n      send({ type: \"SELECTED.SET\", value: _selectedValue, src: \"select.parent\" });\n    },\n    expandParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _expandedValue = add(expandedValue, collection2.getNodeValue(parentNode));\n      send({ type: \"EXPANDED.SET\", value: _expandedValue, src: \"expand.parent\" });\n    },\n    setExpandedValue(value) {\n      const _expandedValue = uniq(value);\n      send({ type: \"EXPANDED.SET\", value: _expandedValue });\n    },\n    setSelectedValue(value) {\n      const _selectedValue = uniq(value);\n      send({ type: \"SELECTED.SET\", value: _selectedValue });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: getRootId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        id: getLabelId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getTreeProps() {\n      return normalize.element({\n        ...parts.tree.attrs,\n        id: getTreeId(scope),\n        dir: prop(\"dir\"),\n        role: \"tree\",\n        \"aria-label\": \"Tree View\",\n        \"aria-labelledby\": getLabelId(scope),\n        \"aria-multiselectable\": prop(\"selectionMode\") === \"multiple\" || void 0,\n        tabIndex: -1,\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          const target = getEventTarget(event);\n          if (isEditableElement(target)) return;\n          const node = target?.closest(\"[data-part=branch-control], [data-part=item]\");\n          if (!node) return;\n          const nodeId = node.dataset.value;\n          if (nodeId == null) {\n            console.warn(`[zag-js/tree-view] Node id not found for node`, node);\n            return;\n          }\n          const isBranchNode = node.matches(\"[data-part=branch-control]\");\n          const keyMap = {\n            ArrowDown(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.ARROW_DOWN\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            ArrowUp(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.ARROW_UP\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            ArrowLeft(event2) {\n              if (isModifierKey(event2) || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: isBranchNode ? \"BRANCH_NODE.ARROW_LEFT\" : \"NODE.ARROW_LEFT\", id: nodeId });\n            },\n            ArrowRight(event2) {\n              if (!isBranchNode || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"BRANCH_NODE.ARROW_RIGHT\", id: nodeId });\n            },\n            Home(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.HOME\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            End(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.END\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            Space(event2) {\n              if (node.dataset.disabled) return;\n              if (isTypingAhead) {\n                send({ type: \"TREE.TYPEAHEAD\", key: event2.key });\n              } else {\n                keyMap.Enter?.(event2);\n              }\n            },\n            Enter(event2) {\n              if (node.dataset.disabled) return;\n              const isLink = target?.closest(\"a[href]\");\n              if (!isLink) event2.preventDefault();\n              send({ type: isBranchNode ? \"BRANCH_NODE.CLICK\" : \"NODE.CLICK\", id: nodeId, src: \"keyboard\" });\n            },\n            \"*\"(event2) {\n              if (node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"SIBLINGS.EXPAND\", id: nodeId });\n            },\n            a(event2) {\n              if (!event2.metaKey || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"SELECTED.ALL\", moveFocus: true });\n            }\n          };\n          const key = getEventKey(event, { dir: prop(\"dir\") });\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            return;\n          }\n          if (!isTypingAhead) return;\n          const isValidTypeahead = event.key.length === 1 && !isModifierKey(event);\n          if (!isValidTypeahead) return;\n          send({ type: \"TREE.TYPEAHEAD\", key: event.key, id: nodeId });\n          event.preventDefault();\n        }\n      });\n    },\n    getNodeState,\n    getItemProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.item.attrs,\n        id: getNodeId(scope, itemState.value),\n        dir: prop(\"dir\"),\n        \"data-ownedby\": getTreeId(scope),\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": itemState.value,\n        tabIndex: itemState.focused ? 0 : -1,\n        \"data-focus\": dataAttr(itemState.focused),\n        role: \"treeitem\",\n        \"aria-current\": itemState.selected ? \"true\" : void 0,\n        \"aria-selected\": itemState.disabled ? void 0 : itemState.selected,\n        \"data-selected\": dataAttr(itemState.selected),\n        \"aria-disabled\": itemState.disabled,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"aria-level\": itemState.depth,\n        \"data-depth\": itemState.depth,\n        style: {\n          \"--depth\": itemState.depth\n        },\n        onFocus(event) {\n          event.stopPropagation();\n          send({ type: \"NODE.FOCUS\", id: itemState.value });\n        },\n        onClick(event) {\n          if (itemState.disabled) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({ type: \"NODE.CLICK\", id: itemState.value, shiftKey: event.shiftKey, ctrlKey: isMetaKey });\n          event.stopPropagation();\n          const isLink = event.currentTarget.matches(\"a[href]\");\n          if (!isLink) event.preventDefault();\n        }\n      });\n    },\n    getItemTextProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemText.attrs,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused)\n      });\n    },\n    getItemIndicatorProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused),\n        hidden: !itemState.selected\n      });\n    },\n    getBranchProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branch.attrs,\n        \"data-depth\": nodeState.depth,\n        dir: prop(\"dir\"),\n        \"data-branch\": nodeState.value,\n        role: \"treeitem\",\n        \"data-ownedby\": getTreeId(scope),\n        \"data-value\": nodeState.value,\n        \"aria-level\": nodeState.depth,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-expanded\": nodeState.expanded,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"aria-disabled\": nodeState.disabled,\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-loading\": dataAttr(nodeState.loading),\n        \"aria-busy\": nodeState.loading,\n        style: {\n          \"--depth\": nodeState.depth\n        }\n      });\n    },\n    getBranchIndicatorProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-loading\": dataAttr(nodeState.loading)\n      });\n    },\n    getBranchTriggerProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchTrigger.attrs,\n        role: \"button\",\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-value\": nodeState.value,\n        \"data-loading\": dataAttr(nodeState.loading),\n        disabled: nodeState.loading,\n        onClick(event) {\n          if (nodeState.disabled || nodeState.loading) return;\n          send({ type: \"BRANCH_TOGGLE.CLICK\", id: nodeState.value });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchControlProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchControl.attrs,\n        role: \"button\",\n        id: getNodeId(scope, nodeState.value),\n        dir: prop(\"dir\"),\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-value\": nodeState.value,\n        \"data-depth\": nodeState.depth,\n        \"data-loading\": dataAttr(nodeState.loading),\n        \"aria-busy\": nodeState.loading,\n        onFocus(event) {\n          send({ type: \"NODE.FOCUS\", id: nodeState.value });\n          event.stopPropagation();\n        },\n        onClick(event) {\n          if (nodeState.disabled || nodeState.loading) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({ type: \"BRANCH_NODE.CLICK\", id: nodeState.value, shiftKey: event.shiftKey, ctrlKey: isMetaKey });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchTextProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchText.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-loading\": dataAttr(nodeState.loading)\n      });\n    },\n    getBranchContentProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchContent.attrs,\n        role: \"group\",\n        dir: prop(\"dir\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-depth\": nodeState.depth,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        hidden: !nodeState.expanded\n      });\n    },\n    getBranchIndentGuideProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndentGuide.attrs,\n        \"data-depth\": nodeState.depth\n      });\n    }\n  };\n}\nvar { and } = createGuards();\nvar machine = createMachine({\n  props({ props: props2 }) {\n    return {\n      selectionMode: \"single\",\n      collection: collection.empty(),\n      typeahead: true,\n      expandOnClick: true,\n      defaultExpandedValue: [],\n      defaultSelectedValue: [],\n      ...props2\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({ prop, bindable, getContext }) {\n    return {\n      expandedValue: bindable(() => ({\n        defaultValue: prop(\"defaultExpandedValue\"),\n        value: prop(\"expandedValue\"),\n        isEqual: isEqual,\n        onChange(value) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onExpandedChange\")?.({ expandedValue: value, focusedValue });\n        }\n      })),\n      selectedValue: bindable(() => ({\n        defaultValue: prop(\"defaultSelectedValue\"),\n        value: prop(\"selectedValue\"),\n        isEqual: isEqual,\n        onChange(value) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onSelectionChange\")?.({ selectedValue: value, focusedValue });\n        }\n      })),\n      focusedValue: bindable(() => ({\n        defaultValue: prop(\"focusedValue\"),\n        onChange(value) {\n          prop(\"onFocusChange\")?.({ focusedValue: value });\n        }\n      })),\n      loadingStatus: bindable(() => ({\n        defaultValue: {}\n      }))\n    };\n  },\n  refs() {\n    return {\n      typeaheadState: { ...getByTypeahead.defaultOptions },\n      pendingAborts: /* @__PURE__ */ new Map()\n    };\n  },\n  computed: {\n    isMultipleSelection: ({ prop }) => prop(\"selectionMode\") === \"multiple\",\n    isTypingAhead: ({ refs }) => refs.get(\"typeaheadState\").keysSoFar.length > 0,\n    visibleNodes: ({ prop, context }) => {\n      const nodes = [];\n      prop(\"collection\").visit({\n        skip: skipFn({ prop, context }),\n        onEnter: (node, indexPath) => {\n          nodes.push({ node, indexPath });\n        }\n      });\n      return nodes;\n    }\n  },\n  on: {\n    \"EXPANDED.SET\": {\n      actions: [\"setExpanded\"]\n    },\n    \"EXPANDED.ALL\": {\n      actions: [\"expandAllBranches\"]\n    },\n    \"BRANCH.EXPAND\": {\n      actions: [\"expandBranches\"]\n    },\n    \"BRANCH.COLLAPSE\": {\n      actions: [\"collapseBranches\"]\n    },\n    \"SELECTED.SET\": {\n      actions: [\"setSelected\"]\n    },\n    \"SELECTED.ALL\": [\n      {\n        guard: and(\"isMultipleSelection\", \"moveFocus\"),\n        actions: [\"selectAllNodes\", \"focusTreeLastNode\"]\n      },\n      {\n        guard: \"isMultipleSelection\",\n        actions: [\"selectAllNodes\"]\n      }\n    ],\n    \"NODE.SELECT\": {\n      actions: [\"selectNode\"]\n    },\n    \"NODE.DESELECT\": {\n      actions: [\"deselectNode\"]\n    }\n  },\n  exit: [\"clearPendingAborts\"],\n  states: {\n    idle: {\n      on: {\n        \"NODE.FOCUS\": {\n          actions: [\"setFocusedNode\"]\n        },\n        \"NODE.ARROW_DOWN\": [\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"focusTreeNextNode\", \"extendSelectionToNextNode\"]\n          },\n          {\n            actions: [\"focusTreeNextNode\"]\n          }\n        ],\n        \"NODE.ARROW_UP\": [\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"focusTreePrevNode\", \"extendSelectionToPrevNode\"]\n          },\n          {\n            actions: [\"focusTreePrevNode\"]\n          }\n        ],\n        \"NODE.ARROW_LEFT\": {\n          actions: [\"focusBranchNode\"]\n        },\n        \"BRANCH_NODE.ARROW_LEFT\": [\n          {\n            guard: \"isBranchExpanded\",\n            actions: [\"collapseBranch\"]\n          },\n          {\n            actions: [\"focusBranchNode\"]\n          }\n        ],\n        \"BRANCH_NODE.ARROW_RIGHT\": [\n          {\n            guard: and(\"isBranchFocused\", \"isBranchExpanded\"),\n            actions: [\"focusBranchFirstNode\"]\n          },\n          {\n            actions: [\"expandBranch\"]\n          }\n        ],\n        \"SIBLINGS.EXPAND\": {\n          actions: [\"expandSiblingBranches\"]\n        },\n        \"NODE.HOME\": [\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToFirstNode\", \"focusTreeFirstNode\"]\n          },\n          {\n            actions: [\"focusTreeFirstNode\"]\n          }\n        ],\n        \"NODE.END\": [\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToLastNode\", \"focusTreeLastNode\"]\n          },\n          {\n            actions: [\"focusTreeLastNode\"]\n          }\n        ],\n        \"NODE.CLICK\": [\n          {\n            guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n            actions: [\"toggleNodeSelection\"]\n          },\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToNode\"]\n          },\n          {\n            actions: [\"selectNode\"]\n          }\n        ],\n        \"BRANCH_NODE.CLICK\": [\n          {\n            guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n            actions: [\"toggleNodeSelection\"]\n          },\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToNode\"]\n          },\n          {\n            guard: \"openOnClick\",\n            actions: [\"selectNode\", \"toggleBranchNode\"]\n          },\n          {\n            actions: [\"selectNode\"]\n          }\n        ],\n        \"BRANCH_TOGGLE.CLICK\": {\n          actions: [\"toggleBranchNode\"]\n        },\n        \"TREE.TYPEAHEAD\": {\n          actions: [\"focusMatchedNode\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      isBranchFocused: ({ context, event }) => context.get(\"focusedValue\") === event.id,\n      isBranchExpanded: ({ context, event }) => context.get(\"expandedValue\").includes(event.id),\n      isShiftKey: ({ event }) => event.shiftKey,\n      isCtrlKey: ({ event }) => event.ctrlKey,\n      hasSelectedItems: ({ context }) => context.get(\"selectedValue\").length > 0,\n      isMultipleSelection: ({ prop }) => prop(\"selectionMode\") === \"multiple\",\n      moveFocus: ({ event }) => !!event.moveFocus,\n      openOnClick: ({ prop }) => !!prop(\"expandOnClick\")\n    },\n    actions: {\n      selectNode({ context, event, prop }) {\n        const value = toArray(event.id || event.value);\n        context.set(\"selectedValue\", (prev) => {\n          if (prop(\"selectionMode\") === \"single\") {\n            return [last(value)].filter(Boolean);\n          } else {\n            return uniq([...prev, ...value]);\n          }\n        });\n      },\n      deselectNode({ context, event }) {\n        const value = toArray(event.id || event.value);\n        context.set(\"selectedValue\", (prev) => remove(prev, ...value));\n      },\n      setFocusedNode({ context, event }) {\n        context.set(\"focusedValue\", event.id);\n      },\n      clearFocusedNode({ context }) {\n        context.set(\"focusedValue\", null);\n      },\n      clearSelectedItem({ context }) {\n        context.set(\"selectedValue\", []);\n      },\n      toggleBranchNode({ context, event, action }) {\n        const isExpanded = context.get(\"expandedValue\").includes(event.id);\n        action(isExpanded ? [\"collapseBranch\"] : [\"expandBranch\"]);\n      },\n      expandBranch(params) {\n        const { event } = params;\n        expandBranches(params, [event.id]);\n      },\n      expandBranches(params) {\n        const { context, event } = params;\n        const valuesToExpand = toArray(event.value);\n        expandBranches(params, diff(valuesToExpand, context.get(\"expandedValue\")));\n      },\n      collapseBranch({ context, event }) {\n        context.set(\"expandedValue\", (prev) => remove(prev, event.id));\n      },\n      collapseBranches(params) {\n        const { context, event } = params;\n        const value = toArray(event.value);\n        context.set(\"expandedValue\", (prev) => remove(prev, ...value));\n      },\n      setExpanded({ context, event }) {\n        context.set(\"expandedValue\", event.value);\n      },\n      setSelected({ context, event }) {\n        context.set(\"selectedValue\", event.value);\n      },\n      focusTreeFirstNode({ prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const firstNode = collection2.getFirstNode();\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeLastNode({ prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const lastNode = collection2.getLastNode();\n        const lastValue = collection2.getNodeValue(lastNode);\n        focusNode(scope, lastValue);\n      },\n      focusBranchFirstNode({ event, prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const branchNode = collection2.findNode(event.id);\n        const firstNode = collection2.getFirstNode(branchNode);\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeNextNode(params) {\n        const { event, prop, scope } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, { skip: skipFn(params) });\n        if (!nextNode) return;\n        const nextValue = collection2.getNodeValue(nextNode);\n        focusNode(scope, nextValue);\n      },\n      focusTreePrevNode(params) {\n        const { event, prop, scope } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, { skip: skipFn(params) });\n        if (!prevNode) return;\n        const prevValue = collection2.getNodeValue(prevNode);\n        focusNode(scope, prevValue);\n      },\n      focusBranchNode({ event, prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const parentNode = collection2.getParentNode(event.id);\n        const parentValue = parentNode ? collection2.getNodeValue(parentNode) : void 0;\n        focusNode(scope, parentValue);\n      },\n      selectAllNodes({ context, prop }) {\n        context.set(\"selectedValue\", prop(\"collection\").getValues());\n      },\n      focusMatchedNode(params) {\n        const { context, prop, refs, event, scope, computed } = params;\n        const nodes = computed(\"visibleNodes\");\n        const elements = nodes.map(({ node: node2 }) => ({\n          textContent: prop(\"collection\").stringifyNode(node2),\n          id: prop(\"collection\").getNodeValue(node2)\n        }));\n        const node = getByTypeahead(elements, {\n          state: refs.get(\"typeaheadState\"),\n          activeId: context.get(\"focusedValue\"),\n          key: event.key\n        });\n        focusNode(scope, node?.id);\n      },\n      toggleNodeSelection({ context, event }) {\n        const selectedValue = addOrRemove(context.get(\"selectedValue\"), event.id);\n        context.set(\"selectedValue\", selectedValue);\n      },\n      expandAllBranches(params) {\n        const { context, prop } = params;\n        const branchValues = prop(\"collection\").getBranchValues();\n        const valuesToExpand = diff(branchValues, context.get(\"expandedValue\"));\n        expandBranches(params, valuesToExpand);\n      },\n      expandSiblingBranches(params) {\n        const { context, event, prop } = params;\n        const collection2 = prop(\"collection\");\n        const indexPath = collection2.getIndexPath(event.id);\n        if (!indexPath) return;\n        const nodes = collection2.getSiblingNodes(indexPath);\n        const values = nodes.map((node) => collection2.getNodeValue(node));\n        const valuesToExpand = diff(values, context.get(\"expandedValue\"));\n        expandBranches(params, valuesToExpand);\n      },\n      extendSelectionToNode(params) {\n        const { context, event, prop, computed } = params;\n        const collection2 = prop(\"collection\");\n        const anchorValue = first(context.get(\"selectedValue\")) || collection2.getNodeValue(collection2.getFirstNode());\n        const targetValue = event.id;\n        let values = [anchorValue, targetValue];\n        let hits = 0;\n        const visibleNodes = computed(\"visibleNodes\");\n        visibleNodes.forEach(({ node }) => {\n          const nodeValue = collection2.getNodeValue(node);\n          if (hits === 1) values.push(nodeValue);\n          if (nodeValue === anchorValue || nodeValue === targetValue) hits++;\n        });\n        context.set(\"selectedValue\", uniq(values));\n      },\n      extendSelectionToNextNode(params) {\n        const { context, event, prop } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, { skip: skipFn(params) });\n        if (!nextNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const nextValue = collection2.getNodeValue(nextNode);\n        if (nextValue == null) return;\n        if (values.has(event.id) && values.has(nextValue)) {\n          values.delete(event.id);\n        } else if (!values.has(nextValue)) {\n          values.add(nextValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToPrevNode(params) {\n        const { context, event, prop } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, { skip: skipFn(params) });\n        if (!prevNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const prevValue = collection2.getNodeValue(prevNode);\n        if (prevValue == null) return;\n        if (values.has(event.id) && values.has(prevValue)) {\n          values.delete(event.id);\n        } else if (!values.has(prevValue)) {\n          values.add(prevValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToFirstNode(params) {\n        const { context, prop } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: (node) => {\n            const nodeValue = collection2.getNodeValue(node);\n            values.push(nodeValue);\n            if (nodeValue === currentSelection) {\n              return \"stop\";\n            }\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      extendSelectionToLastNode(params) {\n        const { context, prop } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        let current = false;\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: (node) => {\n            const nodeValue = collection2.getNodeValue(node);\n            if (nodeValue === currentSelection) current = true;\n            if (current) values.push(nodeValue);\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      clearPendingAborts({ refs }) {\n        const aborts = refs.get(\"pendingAborts\");\n        aborts.forEach((abort) => abort.abort());\n        aborts.clear();\n      }\n    }\n  }\n});\nfunction skipFn(params) {\n  const { prop, context } = params;\n  return function skip({ indexPath }) {\n    const paths = prop(\"collection\").getValuePath(indexPath).slice(0, -1);\n    return paths.some((value) => !context.get(\"expandedValue\").includes(value));\n  };\n}\nfunction partition(array, predicate) {\n  const pass = [];\n  const fail = [];\n  array.forEach((value) => {\n    if (predicate(value)) pass.push(value);\n    else fail.push(value);\n  });\n  return [pass, fail];\n}\nfunction expandBranches(params, ids) {\n  const { context, prop, refs } = params;\n  if (!prop(\"loadChildren\")) {\n    context.set(\"expandedValue\", (prev) => uniq(add(prev, ...ids)));\n    return;\n  }\n  const [loadedValues, loadingValues] = partition(ids, (id) => context.get(\"loadingStatus\")[id] === \"loaded\");\n  if (loadedValues.length > 0) {\n    context.set(\"expandedValue\", (prev) => uniq(add(prev, ...loadedValues)));\n  }\n  if (loadingValues.length === 0) return;\n  const collection2 = prop(\"collection\");\n  const [nodeWithChildren, nodeWithoutChildren] = partition(loadingValues, (id) => {\n    const node = collection2.findNode(id);\n    return collection2.getNodeChildren(node).length > 0;\n  });\n  if (nodeWithChildren.length > 0) {\n    context.set(\"expandedValue\", (prev) => uniq(add(prev, ...nodeWithChildren)));\n  }\n  if (nodeWithoutChildren.length === 0) return;\n  context.set(\"loadingStatus\", (prev) => ({\n    ...prev,\n    ...nodeWithoutChildren.reduce((acc, id) => ({ ...acc, [id]: \"loading\" }), {})\n  }));\n  const nodesToLoad = nodeWithoutChildren.map((id) => {\n    const indexPath = collection2.getIndexPath(id);\n    const valuePath = collection2.getValuePath(indexPath);\n    const node = collection2.findNode(id);\n    return { id, indexPath, valuePath, node };\n  });\n  const pendingAborts = refs.get(\"pendingAborts\");\n  const loadChildren = prop(\"loadChildren\");\n  ensure(loadChildren, () => \"[zag-js/tree-view] `loadChildren` is required for async expansion\");\n  const proms = nodesToLoad.map(({ id, indexPath, valuePath, node }) => {\n    const existingAbort = pendingAborts.get(id);\n    if (existingAbort) {\n      existingAbort.abort();\n      pendingAborts.delete(id);\n    }\n    const abortController = new AbortController();\n    pendingAborts.set(id, abortController);\n    return loadChildren({\n      valuePath,\n      indexPath,\n      node,\n      signal: abortController.signal\n    });\n  });\n  Promise.allSettled(proms).then((results) => {\n    const loadedValues2 = [];\n    const nextLoadingStatus = context.get(\"loadingStatus\");\n    let collection3 = prop(\"collection\");\n    results.forEach((result, index) => {\n      const { id, indexPath, node } = nodesToLoad[index];\n      if (result.status === \"fulfilled\") {\n        nextLoadingStatus[id] = \"loaded\";\n        loadedValues2.push(id);\n        collection3 = collection3.replace(indexPath, { ...node, children: result.value });\n      } else {\n        pendingAborts.delete(id);\n        Reflect.deleteProperty(nextLoadingStatus, id);\n      }\n    });\n    context.set(\"loadingStatus\", nextLoadingStatus);\n    if (loadedValues2.length) {\n      context.set(\"expandedValue\", (prev) => uniq(add(prev, ...loadedValues2)));\n      prop(\"onLoadChildrenComplete\")?.({ collection: collection3 });\n    }\n  });\n}\nvar props = createProps()([\n  \"ids\",\n  \"collection\",\n  \"dir\",\n  \"expandedValue\",\n  \"expandOnClick\",\n  \"focusedValue\",\n  \"getRootNode\",\n  \"id\",\n  \"onExpandedChange\",\n  \"onFocusChange\",\n  \"onSelectionChange\",\n  \"selectedValue\",\n  \"selectionMode\",\n  \"typeahead\",\n  \"defaultExpandedValue\",\n  \"defaultSelectedValue\",\n  \"onLoadChildrenComplete\",\n  \"loadChildren\"\n]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"node\", \"indexPath\"]);\nvar splitItemProps = createSplitProps(itemProps);\n\nexport { anatomy, collection, connect, filePathCollection, itemProps, machine, props, splitItemProps, splitProps };\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,cAAc,EAAEC,cAAc,QAAQ,oBAAoB;AACnE,SAASC,cAAc,EAAEC,QAAQ,EAAEC,gBAAgB,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,WAAW,EAAEC,aAAa,QAAQ,mBAAmB;AAC7I,SAASC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAEC,WAAW,EAAEC,OAAO,EAAEC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,GAAG,EAAEC,MAAM,EAAEC,gBAAgB,QAAQ,eAAe;AAC7H,SAASC,YAAY,EAAEC,aAAa,QAAQ,cAAc;AAC1D,SAASC,WAAW,QAAQ,eAAe;;AAE3C;AACA,IAAIC,OAAO,GAAGxB,aAAa,CAAC,WAAW,CAAC,CAACyB,KAAK,CAC5C,MAAM,EACN,OAAO,EACP,MAAM,EACN,MAAM,EACN,eAAe,EACf,UAAU,EACV,QAAQ,EACR,eAAe,EACf,eAAe,EACf,eAAe,EACf,YAAY,EACZ,iBAAiB,EACjB,mBACF,CAAC;AACD,IAAIA,KAAK,GAAGD,OAAO,CAACE,KAAK,CAAC,CAAC;AAC3B,IAAIC,UAAU,GAAIC,OAAO,IAAK;EAC5B,OAAO,IAAI3B,cAAc,CAAC2B,OAAO,CAAC;AACpC,CAAC;AACDD,UAAU,CAACE,KAAK,GAAG,MAAM;EACvB,OAAO,IAAI5B,cAAc,CAAC;IAAE6B,QAAQ,EAAE;MAAEC,QAAQ,EAAE;IAAG;EAAE,CAAC,CAAC;AAC3D,CAAC;AACD,SAASC,kBAAkBA,CAACC,KAAK,EAAE;EACjC,OAAO/B,cAAc,CAAC+B,KAAK,CAAC;AAC9B;;AAEA;AACA,IAAIC,SAAS,GAAIC,GAAG,IAAKA,GAAG,CAACC,GAAG,EAAEC,IAAI,IAAI,QAAQF,GAAG,CAACG,EAAE,OAAO;AAC/D,IAAIC,UAAU,GAAIJ,GAAG,IAAKA,GAAG,CAACC,GAAG,EAAEI,KAAK,IAAI,QAAQL,GAAG,CAACG,EAAE,QAAQ;AAClE,IAAIG,SAAS,GAAGA,CAACN,GAAG,EAAEO,KAAK,KAAKP,GAAG,CAACC,GAAG,EAAEO,IAAI,GAAGD,KAAK,CAAC,IAAI,QAAQP,GAAG,CAACG,EAAE,SAASI,KAAK,EAAE;AACxF,IAAIE,SAAS,GAAIT,GAAG,IAAKA,GAAG,CAACC,GAAG,EAAES,IAAI,IAAI,QAAQV,GAAG,CAACG,EAAE,OAAO;AAC/D,IAAIQ,SAAS,GAAGA,CAACX,GAAG,EAAEO,KAAK,KAAK;EAC9B,IAAIA,KAAK,IAAI,IAAI,EAAE;EACnB,MAAMK,MAAM,GAAGN,SAAS,CAACN,GAAG,EAAEO,KAAK,CAAC;EACpCP,GAAG,CAACa,OAAO,CAACD,MAAM,CAAC,EAAEE,KAAK,CAAC;IAAEC,aAAa,EAAE;EAAK,CAAC,CAAC;AACrD,CAAC;;AAED;AACA,SAASC,OAAOA,CAACC,OAAO,EAAEC,SAAS,EAAE;EACnC,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,IAAI;IAAEC;EAAK,CAAC,GAAGN,OAAO;EACxD,MAAMO,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;EACtC,MAAMG,aAAa,GAAGC,KAAK,CAACC,IAAI,CAACR,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAAC;EAC9D,MAAMC,aAAa,GAAGH,KAAK,CAACC,IAAI,CAACR,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAAC;EAC9D,MAAME,aAAa,GAAGT,QAAQ,CAAC,eAAe,CAAC;EAC/C,MAAMU,YAAY,GAAGZ,OAAO,CAACS,GAAG,CAAC,cAAc,CAAC;EAChD,MAAMI,aAAa,GAAGb,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC;EAClD,SAASK,YAAYA,CAACC,MAAM,EAAE;IAC5B,MAAM;MAAE1B,IAAI;MAAE2B;IAAU,CAAC,GAAGD,MAAM;IAClC,MAAM3B,KAAK,GAAGiB,WAAW,CAACY,YAAY,CAAC5B,IAAI,CAAC;IAC5C,OAAO;MACLD,KAAK;MACL4B,SAAS;MACTE,SAAS,EAAEb,WAAW,CAACc,YAAY,CAACH,SAAS,CAAC;MAC9CI,QAAQ,EAAEC,OAAO,CAAChC,IAAI,CAAC+B,QAAQ,CAAC;MAChCE,OAAO,EAAEV,YAAY,IAAI,IAAI,GAAGjD,OAAO,CAACqD,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,GAAGJ,YAAY,KAAKxB,KAAK;MAChFmC,QAAQ,EAAEb,aAAa,CAACc,QAAQ,CAACpC,KAAK,CAAC;MACvCqC,QAAQ,EAAEnB,aAAa,CAACkB,QAAQ,CAACpC,KAAK,CAAC;MACvCsC,OAAO,EAAEb,aAAa,CAACzB,KAAK,CAAC,KAAK,SAAS;MAC3CuC,KAAK,EAAEX,SAAS,CAACY,MAAM;MACvBC,QAAQ,EAAExB,WAAW,CAACyB,YAAY,CAACzC,IAAI;IACzC,CAAC;EACH;EACA,OAAO;IACLhB,UAAU,EAAEgC,WAAW;IACvBC,aAAa;IACbI,aAAa;IACbqB,MAAMA,CAAC3C,KAAK,EAAE;MACZgB,IAAI,CAAC;QAAE4B,IAAI,EAAE5C,KAAK,GAAG,eAAe,GAAG,cAAc;QAAEA;MAAM,CAAC,CAAC;IACjE,CAAC;IACD6C,QAAQA,CAAC7C,KAAK,EAAE;MACdgB,IAAI,CAAC;QAAE4B,IAAI,EAAE5C,KAAK,GAAG,iBAAiB,GAAG,cAAc;QAAEA;MAAM,CAAC,CAAC;IACnE,CAAC;IACD8C,QAAQA,CAAC9C,KAAK,EAAE;MACdgB,IAAI,CAAC;QAAE4B,IAAI,EAAE5C,KAAK,GAAG,eAAe,GAAG,cAAc;QAAEA;MAAM,CAAC,CAAC;IACjE,CAAC;IACD+C,MAAMA,CAAC/C,KAAK,EAAE;MACZgB,IAAI,CAAC;QAAE4B,IAAI,EAAE5C,KAAK,GAAG,aAAa,GAAG,cAAc;QAAEA;MAAM,CAAC,CAAC;IAC/D,CAAC;IACDgD,eAAeA,CAAA,EAAG;MAChB,OAAOlC,QAAQ,CAAC,cAAc,CAAC,CAACmC,GAAG,CAAC,CAAC;QAAEhD;MAAK,CAAC,KAAKA,IAAI,CAAC;IACzD,CAAC;IACDM,KAAKA,CAACP,KAAK,EAAE;MACXI,SAAS,CAACS,KAAK,EAAEb,KAAK,CAAC;IACzB,CAAC;IACDkD,YAAYA,CAAClD,KAAK,EAAE;MAClB,MAAMmD,UAAU,GAAGlC,WAAW,CAACmC,aAAa,CAACpD,KAAK,CAAC;MACnD,IAAI,CAACmD,UAAU,EAAE;MACjB,MAAME,cAAc,GAAG7E,GAAG,CAAC8C,aAAa,EAAEL,WAAW,CAACY,YAAY,CAACsB,UAAU,CAAC,CAAC;MAC/EnC,IAAI,CAAC;QAAE4B,IAAI,EAAE,cAAc;QAAE5C,KAAK,EAAEqD,cAAc;QAAEC,GAAG,EAAE;MAAgB,CAAC,CAAC;IAC7E,CAAC;IACDC,YAAYA,CAACvD,KAAK,EAAE;MAClB,MAAMmD,UAAU,GAAGlC,WAAW,CAACmC,aAAa,CAACpD,KAAK,CAAC;MACnD,IAAI,CAACmD,UAAU,EAAE;MACjB,MAAMK,cAAc,GAAGhF,GAAG,CAAC0C,aAAa,EAAED,WAAW,CAACY,YAAY,CAACsB,UAAU,CAAC,CAAC;MAC/EnC,IAAI,CAAC;QAAE4B,IAAI,EAAE,cAAc;QAAE5C,KAAK,EAAEwD,cAAc;QAAEF,GAAG,EAAE;MAAgB,CAAC,CAAC;IAC7E,CAAC;IACDG,gBAAgBA,CAACzD,KAAK,EAAE;MACtB,MAAMwD,cAAc,GAAGvF,IAAI,CAAC+B,KAAK,CAAC;MAClCgB,IAAI,CAAC;QAAE4B,IAAI,EAAE,cAAc;QAAE5C,KAAK,EAAEwD;MAAe,CAAC,CAAC;IACvD,CAAC;IACDE,gBAAgBA,CAAC1D,KAAK,EAAE;MACtB,MAAMqD,cAAc,GAAGpF,IAAI,CAAC+B,KAAK,CAAC;MAClCgB,IAAI,CAAC;QAAE4B,IAAI,EAAE,cAAc;QAAE5C,KAAK,EAAEqD;MAAe,CAAC,CAAC;IACvD,CAAC;IACDM,YAAYA,CAAA,EAAG;MACb,OAAOhD,SAAS,CAACiD,OAAO,CAAC;QACvB,GAAG7E,KAAK,CAACY,IAAI,CAACkE,KAAK;QACnBjE,EAAE,EAAEJ,SAAS,CAACqB,KAAK,CAAC;QACpBiD,GAAG,EAAE/C,IAAI,CAAC,KAAK;MACjB,CAAC,CAAC;IACJ,CAAC;IACDgD,aAAaA,CAAA,EAAG;MACd,OAAOpD,SAAS,CAACiD,OAAO,CAAC;QACvB,GAAG7E,KAAK,CAACe,KAAK,CAAC+D,KAAK;QACpBjE,EAAE,EAAEC,UAAU,CAACgB,KAAK,CAAC;QACrBiD,GAAG,EAAE/C,IAAI,CAAC,KAAK;MACjB,CAAC,CAAC;IACJ,CAAC;IACDiD,YAAYA,CAAA,EAAG;MACb,OAAOrD,SAAS,CAACiD,OAAO,CAAC;QACvB,GAAG7E,KAAK,CAACoB,IAAI,CAAC0D,KAAK;QACnBjE,EAAE,EAAEM,SAAS,CAACW,KAAK,CAAC;QACpBiD,GAAG,EAAE/C,IAAI,CAAC,KAAK,CAAC;QAChBkD,IAAI,EAAE,MAAM;QACZ,YAAY,EAAE,WAAW;QACzB,iBAAiB,EAAEpE,UAAU,CAACgB,KAAK,CAAC;QACpC,sBAAsB,EAAEE,IAAI,CAAC,eAAe,CAAC,KAAK,UAAU,IAAI,KAAK,CAAC;QACtEmD,QAAQ,EAAE,CAAC,CAAC;QACZC,SAASA,CAACC,KAAK,EAAE;UACf,IAAIA,KAAK,CAACC,gBAAgB,EAAE;UAC5B,IAAI1G,gBAAgB,CAACyG,KAAK,CAAC,EAAE;UAC7B,MAAME,MAAM,GAAG1G,cAAc,CAACwG,KAAK,CAAC;UACpC,IAAIvG,iBAAiB,CAACyG,MAAM,CAAC,EAAE;UAC/B,MAAMrE,IAAI,GAAGqE,MAAM,EAAEC,OAAO,CAAC,8CAA8C,CAAC;UAC5E,IAAI,CAACtE,IAAI,EAAE;UACX,MAAMI,MAAM,GAAGJ,IAAI,CAACuE,OAAO,CAACxE,KAAK;UACjC,IAAIK,MAAM,IAAI,IAAI,EAAE;YAClBoE,OAAO,CAACC,IAAI,CAAC,+CAA+C,EAAEzE,IAAI,CAAC;YACnE;UACF;UACA,MAAMyC,YAAY,GAAGzC,IAAI,CAAC0E,OAAO,CAAC,4BAA4B,CAAC;UAC/D,MAAMC,MAAM,GAAG;YACbC,SAASA,CAACC,MAAM,EAAE;cAChB,IAAI/G,aAAa,CAAC+G,MAAM,CAAC,EAAE;cAC3BA,MAAM,CAACC,cAAc,CAAC,CAAC;cACvB/D,IAAI,CAAC;gBAAE4B,IAAI,EAAE,iBAAiB;gBAAEhD,EAAE,EAAES,MAAM;gBAAE2E,QAAQ,EAAEF,MAAM,CAACE;cAAS,CAAC,CAAC;YAC1E,CAAC;YACDC,OAAOA,CAACH,MAAM,EAAE;cACd,IAAI/G,aAAa,CAAC+G,MAAM,CAAC,EAAE;cAC3BA,MAAM,CAACC,cAAc,CAAC,CAAC;cACvB/D,IAAI,CAAC;gBAAE4B,IAAI,EAAE,eAAe;gBAAEhD,EAAE,EAAES,MAAM;gBAAE2E,QAAQ,EAAEF,MAAM,CAACE;cAAS,CAAC,CAAC;YACxE,CAAC;YACDE,SAASA,CAACJ,MAAM,EAAE;cAChB,IAAI/G,aAAa,CAAC+G,MAAM,CAAC,IAAI7E,IAAI,CAACuE,OAAO,CAACxC,QAAQ,EAAE;cACpD8C,MAAM,CAACC,cAAc,CAAC,CAAC;cACvB/D,IAAI,CAAC;gBAAE4B,IAAI,EAAEF,YAAY,GAAG,wBAAwB,GAAG,iBAAiB;gBAAE9C,EAAE,EAAES;cAAO,CAAC,CAAC;YACzF,CAAC;YACD8E,UAAUA,CAACL,MAAM,EAAE;cACjB,IAAI,CAACpC,YAAY,IAAIzC,IAAI,CAACuE,OAAO,CAACxC,QAAQ,EAAE;cAC5C8C,MAAM,CAACC,cAAc,CAAC,CAAC;cACvB/D,IAAI,CAAC;gBAAE4B,IAAI,EAAE,yBAAyB;gBAAEhD,EAAE,EAAES;cAAO,CAAC,CAAC;YACvD,CAAC;YACD+E,IAAIA,CAACN,MAAM,EAAE;cACX,IAAI/G,aAAa,CAAC+G,MAAM,CAAC,EAAE;cAC3BA,MAAM,CAACC,cAAc,CAAC,CAAC;cACvB/D,IAAI,CAAC;gBAAE4B,IAAI,EAAE,WAAW;gBAAEhD,EAAE,EAAES,MAAM;gBAAE2E,QAAQ,EAAEF,MAAM,CAACE;cAAS,CAAC,CAAC;YACpE,CAAC;YACDK,GAAGA,CAACP,MAAM,EAAE;cACV,IAAI/G,aAAa,CAAC+G,MAAM,CAAC,EAAE;cAC3BA,MAAM,CAACC,cAAc,CAAC,CAAC;cACvB/D,IAAI,CAAC;gBAAE4B,IAAI,EAAE,UAAU;gBAAEhD,EAAE,EAAES,MAAM;gBAAE2E,QAAQ,EAAEF,MAAM,CAACE;cAAS,CAAC,CAAC;YACnE,CAAC;YACDM,KAAKA,CAACR,MAAM,EAAE;cACZ,IAAI7E,IAAI,CAACuE,OAAO,CAACxC,QAAQ,EAAE;cAC3B,IAAIT,aAAa,EAAE;gBACjBP,IAAI,CAAC;kBAAE4B,IAAI,EAAE,gBAAgB;kBAAE2C,GAAG,EAAET,MAAM,CAACS;gBAAI,CAAC,CAAC;cACnD,CAAC,MAAM;gBACLX,MAAM,CAACY,KAAK,GAAGV,MAAM,CAAC;cACxB;YACF,CAAC;YACDU,KAAKA,CAACV,MAAM,EAAE;cACZ,IAAI7E,IAAI,CAACuE,OAAO,CAACxC,QAAQ,EAAE;cAC3B,MAAMyD,MAAM,GAAGnB,MAAM,EAAEC,OAAO,CAAC,SAAS,CAAC;cACzC,IAAI,CAACkB,MAAM,EAAEX,MAAM,CAACC,cAAc,CAAC,CAAC;cACpC/D,IAAI,CAAC;gBAAE4B,IAAI,EAAEF,YAAY,GAAG,mBAAmB,GAAG,YAAY;gBAAE9C,EAAE,EAAES,MAAM;gBAAEiD,GAAG,EAAE;cAAW,CAAC,CAAC;YAChG,CAAC;YACD,GAAGoC,CAACZ,MAAM,EAAE;cACV,IAAI7E,IAAI,CAACuE,OAAO,CAACxC,QAAQ,EAAE;cAC3B8C,MAAM,CAACC,cAAc,CAAC,CAAC;cACvB/D,IAAI,CAAC;gBAAE4B,IAAI,EAAE,iBAAiB;gBAAEhD,EAAE,EAAES;cAAO,CAAC,CAAC;YAC/C,CAAC;YACDsF,CAACA,CAACb,MAAM,EAAE;cACR,IAAI,CAACA,MAAM,CAACc,OAAO,IAAI3F,IAAI,CAACuE,OAAO,CAACxC,QAAQ,EAAE;cAC9C8C,MAAM,CAACC,cAAc,CAAC,CAAC;cACvB/D,IAAI,CAAC;gBAAE4B,IAAI,EAAE,cAAc;gBAAEiD,SAAS,EAAE;cAAK,CAAC,CAAC;YACjD;UACF,CAAC;UACD,MAAMN,GAAG,GAAGzH,WAAW,CAACsG,KAAK,EAAE;YAAEN,GAAG,EAAE/C,IAAI,CAAC,KAAK;UAAE,CAAC,CAAC;UACpD,MAAM+E,IAAI,GAAGlB,MAAM,CAACW,GAAG,CAAC;UACxB,IAAIO,IAAI,EAAE;YACRA,IAAI,CAAC1B,KAAK,CAAC;YACX;UACF;UACA,IAAI,CAAC7C,aAAa,EAAE;UACpB,MAAMwE,gBAAgB,GAAG3B,KAAK,CAACmB,GAAG,CAAC/C,MAAM,KAAK,CAAC,IAAI,CAACzE,aAAa,CAACqG,KAAK,CAAC;UACxE,IAAI,CAAC2B,gBAAgB,EAAE;UACvB/E,IAAI,CAAC;YAAE4B,IAAI,EAAE,gBAAgB;YAAE2C,GAAG,EAAEnB,KAAK,CAACmB,GAAG;YAAE3F,EAAE,EAAES;UAAO,CAAC,CAAC;UAC5D+D,KAAK,CAACW,cAAc,CAAC,CAAC;QACxB;MACF,CAAC,CAAC;IACJ,CAAC;IACDrD,YAAY;IACZsE,YAAYA,CAACrE,MAAM,EAAE;MACnB,MAAMsE,SAAS,GAAGvE,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOhB,SAAS,CAACiD,OAAO,CAAC;QACvB,GAAG7E,KAAK,CAACmH,IAAI,CAACrC,KAAK;QACnBjE,EAAE,EAAEG,SAAS,CAACc,KAAK,EAAEoF,SAAS,CAACjG,KAAK,CAAC;QACrC8D,GAAG,EAAE/C,IAAI,CAAC,KAAK,CAAC;QAChB,cAAc,EAAEb,SAAS,CAACW,KAAK,CAAC;QAChC,WAAW,EAAEc,MAAM,CAACC,SAAS,CAACuE,IAAI,CAAC,GAAG,CAAC;QACvC,YAAY,EAAEF,SAAS,CAACjG,KAAK;QAC7BkE,QAAQ,EAAE+B,SAAS,CAAC/D,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,YAAY,EAAExE,QAAQ,CAACuI,SAAS,CAAC/D,OAAO,CAAC;QACzC+B,IAAI,EAAE,UAAU;QAChB,cAAc,EAAEgC,SAAS,CAAC9D,QAAQ,GAAG,MAAM,GAAG,KAAK,CAAC;QACpD,eAAe,EAAE8D,SAAS,CAACjE,QAAQ,GAAG,KAAK,CAAC,GAAGiE,SAAS,CAAC9D,QAAQ;QACjE,eAAe,EAAEzE,QAAQ,CAACuI,SAAS,CAAC9D,QAAQ,CAAC;QAC7C,eAAe,EAAE8D,SAAS,CAACjE,QAAQ;QACnC,eAAe,EAAEtE,QAAQ,CAACuI,SAAS,CAACjE,QAAQ,CAAC;QAC7C,YAAY,EAAEiE,SAAS,CAAC1D,KAAK;QAC7B,YAAY,EAAE0D,SAAS,CAAC1D,KAAK;QAC7B6D,KAAK,EAAE;UACL,SAAS,EAAEH,SAAS,CAAC1D;QACvB,CAAC;QACD8D,OAAOA,CAACjC,KAAK,EAAE;UACbA,KAAK,CAACkC,eAAe,CAAC,CAAC;UACvBtF,IAAI,CAAC;YAAE4B,IAAI,EAAE,YAAY;YAAEhD,EAAE,EAAEqG,SAAS,CAACjG;UAAM,CAAC,CAAC;QACnD,CAAC;QACDuG,OAAOA,CAACnC,KAAK,EAAE;UACb,IAAI6B,SAAS,CAACjE,QAAQ,EAAE;UACxB,MAAMwE,SAAS,GAAGpC,KAAK,CAACwB,OAAO,IAAIxB,KAAK,CAACqC,OAAO;UAChDzF,IAAI,CAAC;YAAE4B,IAAI,EAAE,YAAY;YAAEhD,EAAE,EAAEqG,SAAS,CAACjG,KAAK;YAAEgF,QAAQ,EAAEZ,KAAK,CAACY,QAAQ;YAAEyB,OAAO,EAAED;UAAU,CAAC,CAAC;UAC/FpC,KAAK,CAACkC,eAAe,CAAC,CAAC;UACvB,MAAMb,MAAM,GAAGrB,KAAK,CAACsC,aAAa,CAAC/B,OAAO,CAAC,SAAS,CAAC;UACrD,IAAI,CAACc,MAAM,EAAErB,KAAK,CAACW,cAAc,CAAC,CAAC;QACrC;MACF,CAAC,CAAC;IACJ,CAAC;IACD4B,gBAAgBA,CAAChF,MAAM,EAAE;MACvB,MAAMsE,SAAS,GAAGvE,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOhB,SAAS,CAACiD,OAAO,CAAC;QACvB,GAAG7E,KAAK,CAAC6H,QAAQ,CAAC/C,KAAK;QACvB,eAAe,EAAEnG,QAAQ,CAACuI,SAAS,CAACjE,QAAQ,CAAC;QAC7C,eAAe,EAAEtE,QAAQ,CAACuI,SAAS,CAAC9D,QAAQ,CAAC;QAC7C,YAAY,EAAEzE,QAAQ,CAACuI,SAAS,CAAC/D,OAAO;MAC1C,CAAC,CAAC;IACJ,CAAC;IACD2E,qBAAqBA,CAAClF,MAAM,EAAE;MAC5B,MAAMsE,SAAS,GAAGvE,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOhB,SAAS,CAACiD,OAAO,CAAC;QACvB,GAAG7E,KAAK,CAAC+H,aAAa,CAACjD,KAAK;QAC5B,aAAa,EAAE,IAAI;QACnB,eAAe,EAAEnG,QAAQ,CAACuI,SAAS,CAACjE,QAAQ,CAAC;QAC7C,eAAe,EAAEtE,QAAQ,CAACuI,SAAS,CAAC9D,QAAQ,CAAC;QAC7C,YAAY,EAAEzE,QAAQ,CAACuI,SAAS,CAAC/D,OAAO,CAAC;QACzC6E,MAAM,EAAE,CAACd,SAAS,CAAC9D;MACrB,CAAC,CAAC;IACJ,CAAC;IACD6E,cAAcA,CAACrF,MAAM,EAAE;MACrB,MAAMsF,SAAS,GAAGvF,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOhB,SAAS,CAACiD,OAAO,CAAC;QACvB,GAAG7E,KAAK,CAACmI,MAAM,CAACrD,KAAK;QACrB,YAAY,EAAEoD,SAAS,CAAC1E,KAAK;QAC7BuB,GAAG,EAAE/C,IAAI,CAAC,KAAK,CAAC;QAChB,aAAa,EAAEkG,SAAS,CAACjH,KAAK;QAC9BiE,IAAI,EAAE,UAAU;QAChB,cAAc,EAAE/D,SAAS,CAACW,KAAK,CAAC;QAChC,YAAY,EAAEoG,SAAS,CAACjH,KAAK;QAC7B,YAAY,EAAEiH,SAAS,CAAC1E,KAAK;QAC7B,eAAe,EAAE0E,SAAS,CAACjF,QAAQ,GAAG,KAAK,CAAC,GAAGiF,SAAS,CAAC9E,QAAQ;QACjE,WAAW,EAAER,MAAM,CAACC,SAAS,CAACuE,IAAI,CAAC,GAAG,CAAC;QACvC,eAAe,EAAEzI,QAAQ,CAACuJ,SAAS,CAAC9E,QAAQ,CAAC;QAC7C,eAAe,EAAE8E,SAAS,CAAC5E,QAAQ;QACnC,YAAY,EAAE4E,SAAS,CAAC5E,QAAQ,GAAG,MAAM,GAAG,QAAQ;QACpD,eAAe,EAAE4E,SAAS,CAACjF,QAAQ;QACnC,eAAe,EAAEtE,QAAQ,CAACuJ,SAAS,CAACjF,QAAQ,CAAC;QAC7C,cAAc,EAAEtE,QAAQ,CAACuJ,SAAS,CAAC3E,OAAO,CAAC;QAC3C,WAAW,EAAE2E,SAAS,CAAC3E,OAAO;QAC9B8D,KAAK,EAAE;UACL,SAAS,EAAEa,SAAS,CAAC1E;QACvB;MACF,CAAC,CAAC;IACJ,CAAC;IACD4E,uBAAuBA,CAACxF,MAAM,EAAE;MAC9B,MAAMsF,SAAS,GAAGvF,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOhB,SAAS,CAACiD,OAAO,CAAC;QACvB,GAAG7E,KAAK,CAACqI,eAAe,CAACvD,KAAK;QAC9B,aAAa,EAAE,IAAI;QACnB,YAAY,EAAEoD,SAAS,CAAC5E,QAAQ,GAAG,MAAM,GAAG,QAAQ;QACpD,eAAe,EAAE3E,QAAQ,CAACuJ,SAAS,CAACjF,QAAQ,CAAC;QAC7C,eAAe,EAAEtE,QAAQ,CAACuJ,SAAS,CAAC9E,QAAQ,CAAC;QAC7C,YAAY,EAAEzE,QAAQ,CAACuJ,SAAS,CAAC/E,OAAO,CAAC;QACzC,cAAc,EAAExE,QAAQ,CAACuJ,SAAS,CAAC3E,OAAO;MAC5C,CAAC,CAAC;IACJ,CAAC;IACD+E,qBAAqBA,CAAC1F,MAAM,EAAE;MAC5B,MAAMsF,SAAS,GAAGvF,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOhB,SAAS,CAACiD,OAAO,CAAC;QACvB,GAAG7E,KAAK,CAACuI,aAAa,CAACzD,KAAK;QAC5BI,IAAI,EAAE,QAAQ;QACdH,GAAG,EAAE/C,IAAI,CAAC,KAAK,CAAC;QAChB,eAAe,EAAErD,QAAQ,CAACuJ,SAAS,CAACjF,QAAQ,CAAC;QAC7C,YAAY,EAAEiF,SAAS,CAAC5E,QAAQ,GAAG,MAAM,GAAG,QAAQ;QACpD,YAAY,EAAE4E,SAAS,CAACjH,KAAK;QAC7B,cAAc,EAAEtC,QAAQ,CAACuJ,SAAS,CAAC3E,OAAO,CAAC;QAC3CN,QAAQ,EAAEiF,SAAS,CAAC3E,OAAO;QAC3BiE,OAAOA,CAACnC,KAAK,EAAE;UACb,IAAI6C,SAAS,CAACjF,QAAQ,IAAIiF,SAAS,CAAC3E,OAAO,EAAE;UAC7CtB,IAAI,CAAC;YAAE4B,IAAI,EAAE,qBAAqB;YAAEhD,EAAE,EAAEqH,SAAS,CAACjH;UAAM,CAAC,CAAC;UAC1DoE,KAAK,CAACkC,eAAe,CAAC,CAAC;QACzB;MACF,CAAC,CAAC;IACJ,CAAC;IACDiB,qBAAqBA,CAAC5F,MAAM,EAAE;MAC5B,MAAMsF,SAAS,GAAGvF,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOhB,SAAS,CAACiD,OAAO,CAAC;QACvB,GAAG7E,KAAK,CAACyI,aAAa,CAAC3D,KAAK;QAC5BI,IAAI,EAAE,QAAQ;QACdrE,EAAE,EAAEG,SAAS,CAACc,KAAK,EAAEoG,SAAS,CAACjH,KAAK,CAAC;QACrC8D,GAAG,EAAE/C,IAAI,CAAC,KAAK,CAAC;QAChBmD,QAAQ,EAAE+C,SAAS,CAAC/E,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;QACpC,WAAW,EAAEP,MAAM,CAACC,SAAS,CAACuE,IAAI,CAAC,GAAG,CAAC;QACvC,YAAY,EAAEc,SAAS,CAAC5E,QAAQ,GAAG,MAAM,GAAG,QAAQ;QACpD,eAAe,EAAE3E,QAAQ,CAACuJ,SAAS,CAACjF,QAAQ,CAAC;QAC7C,eAAe,EAAEtE,QAAQ,CAACuJ,SAAS,CAAC9E,QAAQ,CAAC;QAC7C,YAAY,EAAEzE,QAAQ,CAACuJ,SAAS,CAAC/E,OAAO,CAAC;QACzC,YAAY,EAAE+E,SAAS,CAACjH,KAAK;QAC7B,YAAY,EAAEiH,SAAS,CAAC1E,KAAK;QAC7B,cAAc,EAAE7E,QAAQ,CAACuJ,SAAS,CAAC3E,OAAO,CAAC;QAC3C,WAAW,EAAE2E,SAAS,CAAC3E,OAAO;QAC9B+D,OAAOA,CAACjC,KAAK,EAAE;UACbpD,IAAI,CAAC;YAAE4B,IAAI,EAAE,YAAY;YAAEhD,EAAE,EAAEqH,SAAS,CAACjH;UAAM,CAAC,CAAC;UACjDoE,KAAK,CAACkC,eAAe,CAAC,CAAC;QACzB,CAAC;QACDC,OAAOA,CAACnC,KAAK,EAAE;UACb,IAAI6C,SAAS,CAACjF,QAAQ,IAAIiF,SAAS,CAAC3E,OAAO,EAAE;UAC7C,MAAMkE,SAAS,GAAGpC,KAAK,CAACwB,OAAO,IAAIxB,KAAK,CAACqC,OAAO;UAChDzF,IAAI,CAAC;YAAE4B,IAAI,EAAE,mBAAmB;YAAEhD,EAAE,EAAEqH,SAAS,CAACjH,KAAK;YAAEgF,QAAQ,EAAEZ,KAAK,CAACY,QAAQ;YAAEyB,OAAO,EAAED;UAAU,CAAC,CAAC;UACtGpC,KAAK,CAACkC,eAAe,CAAC,CAAC;QACzB;MACF,CAAC,CAAC;IACJ,CAAC;IACDmB,kBAAkBA,CAAC9F,MAAM,EAAE;MACzB,MAAMsF,SAAS,GAAGvF,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOhB,SAAS,CAACiD,OAAO,CAAC;QACvB,GAAG7E,KAAK,CAAC2I,UAAU,CAAC7D,KAAK;QACzBC,GAAG,EAAE/C,IAAI,CAAC,KAAK,CAAC;QAChB,eAAe,EAAErD,QAAQ,CAACuJ,SAAS,CAACjF,QAAQ,CAAC;QAC7C,YAAY,EAAEiF,SAAS,CAAC5E,QAAQ,GAAG,MAAM,GAAG,QAAQ;QACpD,cAAc,EAAE3E,QAAQ,CAACuJ,SAAS,CAAC3E,OAAO;MAC5C,CAAC,CAAC;IACJ,CAAC;IACDqF,qBAAqBA,CAAChG,MAAM,EAAE;MAC5B,MAAMsF,SAAS,GAAGvF,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOhB,SAAS,CAACiD,OAAO,CAAC;QACvB,GAAG7E,KAAK,CAAC6I,aAAa,CAAC/D,KAAK;QAC5BI,IAAI,EAAE,OAAO;QACbH,GAAG,EAAE/C,IAAI,CAAC,KAAK,CAAC;QAChB,YAAY,EAAEkG,SAAS,CAAC5E,QAAQ,GAAG,MAAM,GAAG,QAAQ;QACpD,YAAY,EAAE4E,SAAS,CAAC1E,KAAK;QAC7B,WAAW,EAAEZ,MAAM,CAACC,SAAS,CAACuE,IAAI,CAAC,GAAG,CAAC;QACvC,YAAY,EAAEc,SAAS,CAACjH,KAAK;QAC7B+G,MAAM,EAAE,CAACE,SAAS,CAAC5E;MACrB,CAAC,CAAC;IACJ,CAAC;IACDwF,yBAAyBA,CAAClG,MAAM,EAAE;MAChC,MAAMsF,SAAS,GAAGvF,YAAY,CAACC,MAAM,CAAC;MACtC,OAAOhB,SAAS,CAACiD,OAAO,CAAC;QACvB,GAAG7E,KAAK,CAAC+I,iBAAiB,CAACjE,KAAK;QAChC,YAAY,EAAEoD,SAAS,CAAC1E;MAC1B,CAAC,CAAC;IACJ;EACF,CAAC;AACH;AACA,IAAI;EAAEwF;AAAI,CAAC,GAAGpJ,YAAY,CAAC,CAAC;AAC5B,IAAIqJ,OAAO,GAAGpJ,aAAa,CAAC;EAC1BqJ,KAAKA,CAAC;IAAEA,KAAK,EAAEtG;EAAO,CAAC,EAAE;IACvB,OAAO;MACLuG,aAAa,EAAE,QAAQ;MACvBjJ,UAAU,EAAEA,UAAU,CAACE,KAAK,CAAC,CAAC;MAC9BgJ,SAAS,EAAE,IAAI;MACfC,aAAa,EAAE,IAAI;MACnBC,oBAAoB,EAAE,EAAE;MACxBC,oBAAoB,EAAE,EAAE;MACxB,GAAG3G;IACL,CAAC;EACH,CAAC;EACD4G,YAAYA,CAAA,EAAG;IACb,OAAO,MAAM;EACf,CAAC;EACD3H,OAAOA,CAAC;IAAEG,IAAI;IAAEyH,QAAQ;IAAEC;EAAW,CAAC,EAAE;IACtC,OAAO;MACLvH,aAAa,EAAEsH,QAAQ,CAAC,OAAO;QAC7BE,YAAY,EAAE3H,IAAI,CAAC,sBAAsB,CAAC;QAC1Cf,KAAK,EAAEe,IAAI,CAAC,eAAe,CAAC;QAC5BxC,OAAO,EAAEA,OAAO;QAChBoK,QAAQA,CAAC3I,KAAK,EAAE;UACd,MAAMP,GAAG,GAAGgJ,UAAU,CAAC,CAAC;UACxB,MAAMjH,YAAY,GAAG/B,GAAG,CAAC4B,GAAG,CAAC,cAAc,CAAC;UAC5CN,IAAI,CAAC,kBAAkB,CAAC,GAAG;YAAEG,aAAa,EAAElB,KAAK;YAAEwB;UAAa,CAAC,CAAC;QACpE;MACF,CAAC,CAAC,CAAC;MACHF,aAAa,EAAEkH,QAAQ,CAAC,OAAO;QAC7BE,YAAY,EAAE3H,IAAI,CAAC,sBAAsB,CAAC;QAC1Cf,KAAK,EAAEe,IAAI,CAAC,eAAe,CAAC;QAC5BxC,OAAO,EAAEA,OAAO;QAChBoK,QAAQA,CAAC3I,KAAK,EAAE;UACd,MAAMP,GAAG,GAAGgJ,UAAU,CAAC,CAAC;UACxB,MAAMjH,YAAY,GAAG/B,GAAG,CAAC4B,GAAG,CAAC,cAAc,CAAC;UAC5CN,IAAI,CAAC,mBAAmB,CAAC,GAAG;YAAEO,aAAa,EAAEtB,KAAK;YAAEwB;UAAa,CAAC,CAAC;QACrE;MACF,CAAC,CAAC,CAAC;MACHA,YAAY,EAAEgH,QAAQ,CAAC,OAAO;QAC5BE,YAAY,EAAE3H,IAAI,CAAC,cAAc,CAAC;QAClC4H,QAAQA,CAAC3I,KAAK,EAAE;UACde,IAAI,CAAC,eAAe,CAAC,GAAG;YAAES,YAAY,EAAExB;UAAM,CAAC,CAAC;QAClD;MACF,CAAC,CAAC,CAAC;MACHyB,aAAa,EAAE+G,QAAQ,CAAC,OAAO;QAC7BE,YAAY,EAAE,CAAC;MACjB,CAAC,CAAC;IACJ,CAAC;EACH,CAAC;EACDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE;QAAE,GAAGpL,cAAc,CAACqL;MAAe,CAAC;MACpDC,aAAa,EAAE,eAAgB,IAAIC,GAAG,CAAC;IACzC,CAAC;EACH,CAAC;EACDlI,QAAQ,EAAE;IACRmI,mBAAmB,EAAEA,CAAC;MAAElI;IAAK,CAAC,KAAKA,IAAI,CAAC,eAAe,CAAC,KAAK,UAAU;IACvEQ,aAAa,EAAEA,CAAC;MAAEqH;IAAK,CAAC,KAAKA,IAAI,CAACvH,GAAG,CAAC,gBAAgB,CAAC,CAAC6H,SAAS,CAAC1G,MAAM,GAAG,CAAC;IAC5E2G,YAAY,EAAEA,CAAC;MAAEpI,IAAI;MAAEH;IAAQ,CAAC,KAAK;MACnC,MAAMwI,KAAK,GAAG,EAAE;MAChBrI,IAAI,CAAC,YAAY,CAAC,CAACsI,KAAK,CAAC;QACvBC,IAAI,EAAEC,MAAM,CAAC;UAAExI,IAAI;UAAEH;QAAQ,CAAC,CAAC;QAC/B4I,OAAO,EAAEA,CAACvJ,IAAI,EAAE2B,SAAS,KAAK;UAC5BwH,KAAK,CAACK,IAAI,CAAC;YAAExJ,IAAI;YAAE2B;UAAU,CAAC,CAAC;QACjC;MACF,CAAC,CAAC;MACF,OAAOwH,KAAK;IACd;EACF,CAAC;EACDM,EAAE,EAAE;IACF,cAAc,EAAE;MACdC,OAAO,EAAE,CAAC,aAAa;IACzB,CAAC;IACD,cAAc,EAAE;MACdA,OAAO,EAAE,CAAC,mBAAmB;IAC/B,CAAC;IACD,eAAe,EAAE;MACfA,OAAO,EAAE,CAAC,gBAAgB;IAC5B,CAAC;IACD,iBAAiB,EAAE;MACjBA,OAAO,EAAE,CAAC,kBAAkB;IAC9B,CAAC;IACD,cAAc,EAAE;MACdA,OAAO,EAAE,CAAC,aAAa;IACzB,CAAC;IACD,cAAc,EAAE,CACd;MACEC,KAAK,EAAE7B,GAAG,CAAC,qBAAqB,EAAE,WAAW,CAAC;MAC9C4B,OAAO,EAAE,CAAC,gBAAgB,EAAE,mBAAmB;IACjD,CAAC,EACD;MACEC,KAAK,EAAE,qBAAqB;MAC5BD,OAAO,EAAE,CAAC,gBAAgB;IAC5B,CAAC,CACF;IACD,aAAa,EAAE;MACbA,OAAO,EAAE,CAAC,YAAY;IACxB,CAAC;IACD,eAAe,EAAE;MACfA,OAAO,EAAE,CAAC,cAAc;IAC1B;EACF,CAAC;EACDE,IAAI,EAAE,CAAC,oBAAoB,CAAC;EAC5BC,MAAM,EAAE;IACNC,IAAI,EAAE;MACJL,EAAE,EAAE;QACF,YAAY,EAAE;UACZC,OAAO,EAAE,CAAC,gBAAgB;QAC5B,CAAC;QACD,iBAAiB,EAAE,CACjB;UACEC,KAAK,EAAE7B,GAAG,CAAC,YAAY,EAAE,qBAAqB,CAAC;UAC/C4B,OAAO,EAAE,CAAC,mBAAmB,EAAE,2BAA2B;QAC5D,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,mBAAmB;QAC/B,CAAC,CACF;QACD,eAAe,EAAE,CACf;UACEC,KAAK,EAAE7B,GAAG,CAAC,YAAY,EAAE,qBAAqB,CAAC;UAC/C4B,OAAO,EAAE,CAAC,mBAAmB,EAAE,2BAA2B;QAC5D,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,mBAAmB;QAC/B,CAAC,CACF;QACD,iBAAiB,EAAE;UACjBA,OAAO,EAAE,CAAC,iBAAiB;QAC7B,CAAC;QACD,wBAAwB,EAAE,CACxB;UACEC,KAAK,EAAE,kBAAkB;UACzBD,OAAO,EAAE,CAAC,gBAAgB;QAC5B,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,iBAAiB;QAC7B,CAAC,CACF;QACD,yBAAyB,EAAE,CACzB;UACEC,KAAK,EAAE7B,GAAG,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;UACjD4B,OAAO,EAAE,CAAC,sBAAsB;QAClC,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,cAAc;QAC1B,CAAC,CACF;QACD,iBAAiB,EAAE;UACjBA,OAAO,EAAE,CAAC,uBAAuB;QACnC,CAAC;QACD,WAAW,EAAE,CACX;UACEC,KAAK,EAAE7B,GAAG,CAAC,YAAY,EAAE,qBAAqB,CAAC;UAC/C4B,OAAO,EAAE,CAAC,4BAA4B,EAAE,oBAAoB;QAC9D,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,oBAAoB;QAChC,CAAC,CACF;QACD,UAAU,EAAE,CACV;UACEC,KAAK,EAAE7B,GAAG,CAAC,YAAY,EAAE,qBAAqB,CAAC;UAC/C4B,OAAO,EAAE,CAAC,2BAA2B,EAAE,mBAAmB;QAC5D,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,mBAAmB;QAC/B,CAAC,CACF;QACD,YAAY,EAAE,CACZ;UACEC,KAAK,EAAE7B,GAAG,CAAC,WAAW,EAAE,qBAAqB,CAAC;UAC9C4B,OAAO,EAAE,CAAC,qBAAqB;QACjC,CAAC,EACD;UACEC,KAAK,EAAE7B,GAAG,CAAC,YAAY,EAAE,qBAAqB,CAAC;UAC/C4B,OAAO,EAAE,CAAC,uBAAuB;QACnC,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,YAAY;QACxB,CAAC,CACF;QACD,mBAAmB,EAAE,CACnB;UACEC,KAAK,EAAE7B,GAAG,CAAC,WAAW,EAAE,qBAAqB,CAAC;UAC9C4B,OAAO,EAAE,CAAC,qBAAqB;QACjC,CAAC,EACD;UACEC,KAAK,EAAE7B,GAAG,CAAC,YAAY,EAAE,qBAAqB,CAAC;UAC/C4B,OAAO,EAAE,CAAC,uBAAuB;QACnC,CAAC,EACD;UACEC,KAAK,EAAE,aAAa;UACpBD,OAAO,EAAE,CAAC,YAAY,EAAE,kBAAkB;QAC5C,CAAC,EACD;UACEA,OAAO,EAAE,CAAC,YAAY;QACxB,CAAC,CACF;QACD,qBAAqB,EAAE;UACrBA,OAAO,EAAE,CAAC,kBAAkB;QAC9B,CAAC;QACD,gBAAgB,EAAE;UAChBA,OAAO,EAAE,CAAC,kBAAkB;QAC9B;MACF;IACF;EACF,CAAC;EACDK,eAAe,EAAE;IACfC,MAAM,EAAE;MACNC,eAAe,EAAEA,CAAC;QAAEtJ,OAAO;QAAEwD;MAAM,CAAC,KAAKxD,OAAO,CAACS,GAAG,CAAC,cAAc,CAAC,KAAK+C,KAAK,CAACxE,EAAE;MACjFuK,gBAAgB,EAAEA,CAAC;QAAEvJ,OAAO;QAAEwD;MAAM,CAAC,KAAKxD,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAACe,QAAQ,CAACgC,KAAK,CAACxE,EAAE,CAAC;MACzFwK,UAAU,EAAEA,CAAC;QAAEhG;MAAM,CAAC,KAAKA,KAAK,CAACY,QAAQ;MACzCqF,SAAS,EAAEA,CAAC;QAAEjG;MAAM,CAAC,KAAKA,KAAK,CAACqC,OAAO;MACvC6D,gBAAgB,EAAEA,CAAC;QAAE1J;MAAQ,CAAC,KAAKA,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAACmB,MAAM,GAAG,CAAC;MAC1EyG,mBAAmB,EAAEA,CAAC;QAAElI;MAAK,CAAC,KAAKA,IAAI,CAAC,eAAe,CAAC,KAAK,UAAU;MACvE8E,SAAS,EAAEA,CAAC;QAAEzB;MAAM,CAAC,KAAK,CAAC,CAACA,KAAK,CAACyB,SAAS;MAC3C0E,WAAW,EAAEA,CAAC;QAAExJ;MAAK,CAAC,KAAK,CAAC,CAACA,IAAI,CAAC,eAAe;IACnD,CAAC;IACD4I,OAAO,EAAE;MACPa,UAAUA,CAAC;QAAE5J,OAAO;QAAEwD,KAAK;QAAErD;MAAK,CAAC,EAAE;QACnC,MAAMf,KAAK,GAAG5B,OAAO,CAACgG,KAAK,CAACxE,EAAE,IAAIwE,KAAK,CAACpE,KAAK,CAAC;QAC9CY,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAGC,IAAI,IAAK;UACrC,IAAI3J,IAAI,CAAC,eAAe,CAAC,KAAK,QAAQ,EAAE;YACtC,OAAO,CAACzC,IAAI,CAAC0B,KAAK,CAAC,CAAC,CAAC2K,MAAM,CAAC1I,OAAO,CAAC;UACtC,CAAC,MAAM;YACL,OAAOhE,IAAI,CAAC,CAAC,GAAGyM,IAAI,EAAE,GAAG1K,KAAK,CAAC,CAAC;UAClC;QACF,CAAC,CAAC;MACJ,CAAC;MACD4K,YAAYA,CAAC;QAAEhK,OAAO;QAAEwD;MAAM,CAAC,EAAE;QAC/B,MAAMpE,KAAK,GAAG5B,OAAO,CAACgG,KAAK,CAACxE,EAAE,IAAIwE,KAAK,CAACpE,KAAK,CAAC;QAC9CY,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAGC,IAAI,IAAKrM,MAAM,CAACqM,IAAI,EAAE,GAAG1K,KAAK,CAAC,CAAC;MAChE,CAAC;MACD6K,cAAcA,CAAC;QAAEjK,OAAO;QAAEwD;MAAM,CAAC,EAAE;QACjCxD,OAAO,CAAC6J,GAAG,CAAC,cAAc,EAAErG,KAAK,CAACxE,EAAE,CAAC;MACvC,CAAC;MACDkL,gBAAgBA,CAAC;QAAElK;MAAQ,CAAC,EAAE;QAC5BA,OAAO,CAAC6J,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC;MACnC,CAAC;MACDM,iBAAiBA,CAAC;QAAEnK;MAAQ,CAAC,EAAE;QAC7BA,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAE,EAAE,CAAC;MAClC,CAAC;MACDO,gBAAgBA,CAAC;QAAEpK,OAAO;QAAEwD,KAAK;QAAE6G;MAAO,CAAC,EAAE;QAC3C,MAAMC,UAAU,GAAGtK,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAACe,QAAQ,CAACgC,KAAK,CAACxE,EAAE,CAAC;QAClEqL,MAAM,CAACC,UAAU,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;MAC5D,CAAC;MACDC,YAAYA,CAACC,MAAM,EAAE;QACnB,MAAM;UAAEhH;QAAM,CAAC,GAAGgH,MAAM;QACxBC,cAAc,CAACD,MAAM,EAAE,CAAChH,KAAK,CAACxE,EAAE,CAAC,CAAC;MACpC,CAAC;MACDyL,cAAcA,CAACD,MAAM,EAAE;QACrB,MAAM;UAAExK,OAAO;UAAEwD;QAAM,CAAC,GAAGgH,MAAM;QACjC,MAAME,cAAc,GAAGlN,OAAO,CAACgG,KAAK,CAACpE,KAAK,CAAC;QAC3CqL,cAAc,CAACD,MAAM,EAAElN,IAAI,CAACoN,cAAc,EAAE1K,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;MAC5E,CAAC;MACDkK,cAAcA,CAAC;QAAE3K,OAAO;QAAEwD;MAAM,CAAC,EAAE;QACjCxD,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAGC,IAAI,IAAKrM,MAAM,CAACqM,IAAI,EAAEtG,KAAK,CAACxE,EAAE,CAAC,CAAC;MAChE,CAAC;MACD4L,gBAAgBA,CAACJ,MAAM,EAAE;QACvB,MAAM;UAAExK,OAAO;UAAEwD;QAAM,CAAC,GAAGgH,MAAM;QACjC,MAAMpL,KAAK,GAAG5B,OAAO,CAACgG,KAAK,CAACpE,KAAK,CAAC;QAClCY,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAGC,IAAI,IAAKrM,MAAM,CAACqM,IAAI,EAAE,GAAG1K,KAAK,CAAC,CAAC;MAChE,CAAC;MACDyL,WAAWA,CAAC;QAAE7K,OAAO;QAAEwD;MAAM,CAAC,EAAE;QAC9BxD,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAErG,KAAK,CAACpE,KAAK,CAAC;MAC3C,CAAC;MACD0L,WAAWA,CAAC;QAAE9K,OAAO;QAAEwD;MAAM,CAAC,EAAE;QAC9BxD,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAErG,KAAK,CAACpE,KAAK,CAAC;MAC3C,CAAC;MACD2L,kBAAkBA,CAAC;QAAE5K,IAAI;QAAEF;MAAM,CAAC,EAAE;QAClC,MAAMI,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;QACtC,MAAM6K,SAAS,GAAG3K,WAAW,CAAC4K,YAAY,CAAC,CAAC;QAC5C,MAAMC,UAAU,GAAG7K,WAAW,CAACY,YAAY,CAAC+J,SAAS,CAAC;QACtDxL,SAAS,CAACS,KAAK,EAAEiL,UAAU,CAAC;MAC9B,CAAC;MACDC,iBAAiBA,CAAC;QAAEhL,IAAI;QAAEF;MAAM,CAAC,EAAE;QACjC,MAAMI,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMiL,QAAQ,GAAG/K,WAAW,CAACgL,WAAW,CAAC,CAAC;QAC1C,MAAMC,SAAS,GAAGjL,WAAW,CAACY,YAAY,CAACmK,QAAQ,CAAC;QACpD5L,SAAS,CAACS,KAAK,EAAEqL,SAAS,CAAC;MAC7B,CAAC;MACDC,oBAAoBA,CAAC;QAAE/H,KAAK;QAAErD,IAAI;QAAEF;MAAM,CAAC,EAAE;QAC3C,MAAMI,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMqL,UAAU,GAAGnL,WAAW,CAACoL,QAAQ,CAACjI,KAAK,CAACxE,EAAE,CAAC;QACjD,MAAMgM,SAAS,GAAG3K,WAAW,CAAC4K,YAAY,CAACO,UAAU,CAAC;QACtD,MAAMN,UAAU,GAAG7K,WAAW,CAACY,YAAY,CAAC+J,SAAS,CAAC;QACtDxL,SAAS,CAACS,KAAK,EAAEiL,UAAU,CAAC;MAC9B,CAAC;MACDQ,iBAAiBA,CAAClB,MAAM,EAAE;QACxB,MAAM;UAAEhH,KAAK;UAAErD,IAAI;UAAEF;QAAM,CAAC,GAAGuK,MAAM;QACrC,MAAMnK,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMwL,QAAQ,GAAGtL,WAAW,CAACuL,WAAW,CAACpI,KAAK,CAACxE,EAAE,EAAE;UAAE0J,IAAI,EAAEC,MAAM,CAAC6B,MAAM;QAAE,CAAC,CAAC;QAC5E,IAAI,CAACmB,QAAQ,EAAE;QACf,MAAME,SAAS,GAAGxL,WAAW,CAACY,YAAY,CAAC0K,QAAQ,CAAC;QACpDnM,SAAS,CAACS,KAAK,EAAE4L,SAAS,CAAC;MAC7B,CAAC;MACDC,iBAAiBA,CAACtB,MAAM,EAAE;QACxB,MAAM;UAAEhH,KAAK;UAAErD,IAAI;UAAEF;QAAM,CAAC,GAAGuK,MAAM;QACrC,MAAMnK,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;QACtC,MAAM4L,QAAQ,GAAG1L,WAAW,CAAC2L,eAAe,CAACxI,KAAK,CAACxE,EAAE,EAAE;UAAE0J,IAAI,EAAEC,MAAM,CAAC6B,MAAM;QAAE,CAAC,CAAC;QAChF,IAAI,CAACuB,QAAQ,EAAE;QACf,MAAME,SAAS,GAAG5L,WAAW,CAACY,YAAY,CAAC8K,QAAQ,CAAC;QACpDvM,SAAS,CAACS,KAAK,EAAEgM,SAAS,CAAC;MAC7B,CAAC;MACDC,eAAeA,CAAC;QAAE1I,KAAK;QAAErD,IAAI;QAAEF;MAAM,CAAC,EAAE;QACtC,MAAMI,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMoC,UAAU,GAAGlC,WAAW,CAACmC,aAAa,CAACgB,KAAK,CAACxE,EAAE,CAAC;QACtD,MAAMmN,WAAW,GAAG5J,UAAU,GAAGlC,WAAW,CAACY,YAAY,CAACsB,UAAU,CAAC,GAAG,KAAK,CAAC;QAC9E/C,SAAS,CAACS,KAAK,EAAEkM,WAAW,CAAC;MAC/B,CAAC;MACDC,cAAcA,CAAC;QAAEpM,OAAO;QAAEG;MAAK,CAAC,EAAE;QAChCH,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAE1J,IAAI,CAAC,YAAY,CAAC,CAACkM,SAAS,CAAC,CAAC,CAAC;MAC9D,CAAC;MACDC,gBAAgBA,CAAC9B,MAAM,EAAE;QACvB,MAAM;UAAExK,OAAO;UAAEG,IAAI;UAAE6H,IAAI;UAAExE,KAAK;UAAEvD,KAAK;UAAEC;QAAS,CAAC,GAAGsK,MAAM;QAC9D,MAAMhC,KAAK,GAAGtI,QAAQ,CAAC,cAAc,CAAC;QACtC,MAAMqM,QAAQ,GAAG/D,KAAK,CAACnG,GAAG,CAAC,CAAC;UAAEhD,IAAI,EAAEmN;QAAM,CAAC,MAAM;UAC/CC,WAAW,EAAEtM,IAAI,CAAC,YAAY,CAAC,CAACuM,aAAa,CAACF,KAAK,CAAC;UACpDxN,EAAE,EAAEmB,IAAI,CAAC,YAAY,CAAC,CAACc,YAAY,CAACuL,KAAK;QAC3C,CAAC,CAAC,CAAC;QACH,MAAMnN,IAAI,GAAGxC,cAAc,CAAC0P,QAAQ,EAAE;UACpCI,KAAK,EAAE3E,IAAI,CAACvH,GAAG,CAAC,gBAAgB,CAAC;UACjCmM,QAAQ,EAAE5M,OAAO,CAACS,GAAG,CAAC,cAAc,CAAC;UACrCkE,GAAG,EAAEnB,KAAK,CAACmB;QACb,CAAC,CAAC;QACFnF,SAAS,CAACS,KAAK,EAAEZ,IAAI,EAAEL,EAAE,CAAC;MAC5B,CAAC;MACD6N,mBAAmBA,CAAC;QAAE7M,OAAO;QAAEwD;MAAM,CAAC,EAAE;QACtC,MAAM9C,aAAa,GAAGnD,WAAW,CAACyC,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,EAAE+C,KAAK,CAACxE,EAAE,CAAC;QACzEgB,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAEnJ,aAAa,CAAC;MAC7C,CAAC;MACDoM,iBAAiBA,CAACtC,MAAM,EAAE;QACxB,MAAM;UAAExK,OAAO;UAAEG;QAAK,CAAC,GAAGqK,MAAM;QAChC,MAAMuC,YAAY,GAAG5M,IAAI,CAAC,YAAY,CAAC,CAAC6M,eAAe,CAAC,CAAC;QACzD,MAAMtC,cAAc,GAAGpN,IAAI,CAACyP,YAAY,EAAE/M,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAAC;QACvEgK,cAAc,CAACD,MAAM,EAAEE,cAAc,CAAC;MACxC,CAAC;MACDuC,qBAAqBA,CAACzC,MAAM,EAAE;QAC5B,MAAM;UAAExK,OAAO;UAAEwD,KAAK;UAAErD;QAAK,CAAC,GAAGqK,MAAM;QACvC,MAAMnK,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMa,SAAS,GAAGX,WAAW,CAAC6M,YAAY,CAAC1J,KAAK,CAACxE,EAAE,CAAC;QACpD,IAAI,CAACgC,SAAS,EAAE;QAChB,MAAMwH,KAAK,GAAGnI,WAAW,CAAC8M,eAAe,CAACnM,SAAS,CAAC;QACpD,MAAMoM,MAAM,GAAG5E,KAAK,CAACnG,GAAG,CAAEhD,IAAI,IAAKgB,WAAW,CAACY,YAAY,CAAC5B,IAAI,CAAC,CAAC;QAClE,MAAMqL,cAAc,GAAGpN,IAAI,CAAC8P,MAAM,EAAEpN,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAAC;QACjEgK,cAAc,CAACD,MAAM,EAAEE,cAAc,CAAC;MACxC,CAAC;MACD2C,qBAAqBA,CAAC7C,MAAM,EAAE;QAC5B,MAAM;UAAExK,OAAO;UAAEwD,KAAK;UAAErD,IAAI;UAAED;QAAS,CAAC,GAAGsK,MAAM;QACjD,MAAMnK,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMmN,WAAW,GAAGlQ,KAAK,CAAC4C,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAAC,IAAIJ,WAAW,CAACY,YAAY,CAACZ,WAAW,CAAC4K,YAAY,CAAC,CAAC,CAAC;QAC/G,MAAMsC,WAAW,GAAG/J,KAAK,CAACxE,EAAE;QAC5B,IAAIoO,MAAM,GAAG,CAACE,WAAW,EAAEC,WAAW,CAAC;QACvC,IAAIC,IAAI,GAAG,CAAC;QACZ,MAAMjF,YAAY,GAAGrI,QAAQ,CAAC,cAAc,CAAC;QAC7CqI,YAAY,CAACkF,OAAO,CAAC,CAAC;UAAEpO;QAAK,CAAC,KAAK;UACjC,MAAMqO,SAAS,GAAGrN,WAAW,CAACY,YAAY,CAAC5B,IAAI,CAAC;UAChD,IAAImO,IAAI,KAAK,CAAC,EAAEJ,MAAM,CAACvE,IAAI,CAAC6E,SAAS,CAAC;UACtC,IAAIA,SAAS,KAAKJ,WAAW,IAAII,SAAS,KAAKH,WAAW,EAAEC,IAAI,EAAE;QACpE,CAAC,CAAC;QACFxN,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAExM,IAAI,CAAC+P,MAAM,CAAC,CAAC;MAC5C,CAAC;MACDO,yBAAyBA,CAACnD,MAAM,EAAE;QAChC,MAAM;UAAExK,OAAO;UAAEwD,KAAK;UAAErD;QAAK,CAAC,GAAGqK,MAAM;QACvC,MAAMnK,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;QACtC,MAAMwL,QAAQ,GAAGtL,WAAW,CAACuL,WAAW,CAACpI,KAAK,CAACxE,EAAE,EAAE;UAAE0J,IAAI,EAAEC,MAAM,CAAC6B,MAAM;QAAE,CAAC,CAAC;QAC5E,IAAI,CAACmB,QAAQ,EAAE;QACf,MAAMyB,MAAM,GAAG,IAAIQ,GAAG,CAAC5N,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAAC;QACpD,MAAMoL,SAAS,GAAGxL,WAAW,CAACY,YAAY,CAAC0K,QAAQ,CAAC;QACpD,IAAIE,SAAS,IAAI,IAAI,EAAE;QACvB,IAAIuB,MAAM,CAACS,GAAG,CAACrK,KAAK,CAACxE,EAAE,CAAC,IAAIoO,MAAM,CAACS,GAAG,CAAChC,SAAS,CAAC,EAAE;UACjDuB,MAAM,CAACU,MAAM,CAACtK,KAAK,CAACxE,EAAE,CAAC;QACzB,CAAC,MAAM,IAAI,CAACoO,MAAM,CAACS,GAAG,CAAChC,SAAS,CAAC,EAAE;UACjCuB,MAAM,CAACxP,GAAG,CAACiO,SAAS,CAAC;QACvB;QACA7L,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAEtJ,KAAK,CAACC,IAAI,CAAC4M,MAAM,CAAC,CAAC;MAClD,CAAC;MACDW,yBAAyBA,CAACvD,MAAM,EAAE;QAChC,MAAM;UAAExK,OAAO;UAAEwD,KAAK;UAAErD;QAAK,CAAC,GAAGqK,MAAM;QACvC,MAAMnK,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;QACtC,MAAM4L,QAAQ,GAAG1L,WAAW,CAAC2L,eAAe,CAACxI,KAAK,CAACxE,EAAE,EAAE;UAAE0J,IAAI,EAAEC,MAAM,CAAC6B,MAAM;QAAE,CAAC,CAAC;QAChF,IAAI,CAACuB,QAAQ,EAAE;QACf,MAAMqB,MAAM,GAAG,IAAIQ,GAAG,CAAC5N,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAAC;QACpD,MAAMwL,SAAS,GAAG5L,WAAW,CAACY,YAAY,CAAC8K,QAAQ,CAAC;QACpD,IAAIE,SAAS,IAAI,IAAI,EAAE;QACvB,IAAImB,MAAM,CAACS,GAAG,CAACrK,KAAK,CAACxE,EAAE,CAAC,IAAIoO,MAAM,CAACS,GAAG,CAAC5B,SAAS,CAAC,EAAE;UACjDmB,MAAM,CAACU,MAAM,CAACtK,KAAK,CAACxE,EAAE,CAAC;QACzB,CAAC,MAAM,IAAI,CAACoO,MAAM,CAACS,GAAG,CAAC5B,SAAS,CAAC,EAAE;UACjCmB,MAAM,CAACxP,GAAG,CAACqO,SAAS,CAAC;QACvB;QACAjM,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAEtJ,KAAK,CAACC,IAAI,CAAC4M,MAAM,CAAC,CAAC;MAClD,CAAC;MACDY,0BAA0BA,CAACxD,MAAM,EAAE;QACjC,MAAM;UAAExK,OAAO;UAAEG;QAAK,CAAC,GAAGqK,MAAM;QAChC,MAAMnK,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;QACtC,MAAM8N,gBAAgB,GAAG7Q,KAAK,CAAC4C,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAAC;QAC5D,MAAM2M,MAAM,GAAG,EAAE;QACjB/M,WAAW,CAACoI,KAAK,CAAC;UAChBC,IAAI,EAAEC,MAAM,CAAC6B,MAAM,CAAC;UACpB5B,OAAO,EAAGvJ,IAAI,IAAK;YACjB,MAAMqO,SAAS,GAAGrN,WAAW,CAACY,YAAY,CAAC5B,IAAI,CAAC;YAChD+N,MAAM,CAACvE,IAAI,CAAC6E,SAAS,CAAC;YACtB,IAAIA,SAAS,KAAKO,gBAAgB,EAAE;cAClC,OAAO,MAAM;YACf;UACF;QACF,CAAC,CAAC;QACFjO,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAEuD,MAAM,CAAC;MACtC,CAAC;MACDc,yBAAyBA,CAAC1D,MAAM,EAAE;QAChC,MAAM;UAAExK,OAAO;UAAEG;QAAK,CAAC,GAAGqK,MAAM;QAChC,MAAMnK,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;QACtC,MAAM8N,gBAAgB,GAAG7Q,KAAK,CAAC4C,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAAC;QAC5D,MAAM2M,MAAM,GAAG,EAAE;QACjB,IAAIe,OAAO,GAAG,KAAK;QACnB9N,WAAW,CAACoI,KAAK,CAAC;UAChBC,IAAI,EAAEC,MAAM,CAAC6B,MAAM,CAAC;UACpB5B,OAAO,EAAGvJ,IAAI,IAAK;YACjB,MAAMqO,SAAS,GAAGrN,WAAW,CAACY,YAAY,CAAC5B,IAAI,CAAC;YAChD,IAAIqO,SAAS,KAAKO,gBAAgB,EAAEE,OAAO,GAAG,IAAI;YAClD,IAAIA,OAAO,EAAEf,MAAM,CAACvE,IAAI,CAAC6E,SAAS,CAAC;UACrC;QACF,CAAC,CAAC;QACF1N,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAEuD,MAAM,CAAC;MACtC,CAAC;MACDgB,kBAAkBA,CAAC;QAAEpG;MAAK,CAAC,EAAE;QAC3B,MAAMqG,MAAM,GAAGrG,IAAI,CAACvH,GAAG,CAAC,eAAe,CAAC;QACxC4N,MAAM,CAACZ,OAAO,CAAEa,KAAK,IAAKA,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;QACxCD,MAAM,CAACE,KAAK,CAAC,CAAC;MAChB;IACF;EACF;AACF,CAAC,CAAC;AACF,SAAS5F,MAAMA,CAAC6B,MAAM,EAAE;EACtB,MAAM;IAAErK,IAAI;IAAEH;EAAQ,CAAC,GAAGwK,MAAM;EAChC,OAAO,SAAS9B,IAAIA,CAAC;IAAE1H;EAAU,CAAC,EAAE;IAClC,MAAMrC,KAAK,GAAGwB,IAAI,CAAC,YAAY,CAAC,CAACgB,YAAY,CAACH,SAAS,CAAC,CAACwN,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACrE,OAAO7P,KAAK,CAAC8P,IAAI,CAAErP,KAAK,IAAK,CAACY,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAACe,QAAQ,CAACpC,KAAK,CAAC,CAAC;EAC7E,CAAC;AACH;AACA,SAASsP,SAASA,CAACC,KAAK,EAAEC,SAAS,EAAE;EACnC,MAAMC,IAAI,GAAG,EAAE;EACf,MAAMC,IAAI,GAAG,EAAE;EACfH,KAAK,CAAClB,OAAO,CAAErO,KAAK,IAAK;IACvB,IAAIwP,SAAS,CAACxP,KAAK,CAAC,EAAEyP,IAAI,CAAChG,IAAI,CAACzJ,KAAK,CAAC,CAAC,KAClC0P,IAAI,CAACjG,IAAI,CAACzJ,KAAK,CAAC;EACvB,CAAC,CAAC;EACF,OAAO,CAACyP,IAAI,EAAEC,IAAI,CAAC;AACrB;AACA,SAASrE,cAAcA,CAACD,MAAM,EAAE1L,GAAG,EAAE;EACnC,MAAM;IAAEkB,OAAO;IAAEG,IAAI;IAAE6H;EAAK,CAAC,GAAGwC,MAAM;EACtC,IAAI,CAACrK,IAAI,CAAC,cAAc,CAAC,EAAE;IACzBH,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAGC,IAAI,IAAKzM,IAAI,CAACO,GAAG,CAACkM,IAAI,EAAE,GAAGhL,GAAG,CAAC,CAAC,CAAC;IAC/D;EACF;EACA,MAAM,CAACiQ,YAAY,EAAEC,aAAa,CAAC,GAAGN,SAAS,CAAC5P,GAAG,EAAGE,EAAE,IAAKgB,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC,CAACzB,EAAE,CAAC,KAAK,QAAQ,CAAC;EAC3G,IAAI+P,YAAY,CAACnN,MAAM,GAAG,CAAC,EAAE;IAC3B5B,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAGC,IAAI,IAAKzM,IAAI,CAACO,GAAG,CAACkM,IAAI,EAAE,GAAGiF,YAAY,CAAC,CAAC,CAAC;EAC1E;EACA,IAAIC,aAAa,CAACpN,MAAM,KAAK,CAAC,EAAE;EAChC,MAAMvB,WAAW,GAAGF,IAAI,CAAC,YAAY,CAAC;EACtC,MAAM,CAAC8O,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGR,SAAS,CAACM,aAAa,EAAGhQ,EAAE,IAAK;IAC/E,MAAMK,IAAI,GAAGgB,WAAW,CAACoL,QAAQ,CAACzM,EAAE,CAAC;IACrC,OAAOqB,WAAW,CAAC8O,eAAe,CAAC9P,IAAI,CAAC,CAACuC,MAAM,GAAG,CAAC;EACrD,CAAC,CAAC;EACF,IAAIqN,gBAAgB,CAACrN,MAAM,GAAG,CAAC,EAAE;IAC/B5B,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAGC,IAAI,IAAKzM,IAAI,CAACO,GAAG,CAACkM,IAAI,EAAE,GAAGmF,gBAAgB,CAAC,CAAC,CAAC;EAC9E;EACA,IAAIC,mBAAmB,CAACtN,MAAM,KAAK,CAAC,EAAE;EACtC5B,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAGC,IAAI,KAAM;IACtC,GAAGA,IAAI;IACP,GAAGoF,mBAAmB,CAACE,MAAM,CAAC,CAACC,GAAG,EAAErQ,EAAE,MAAM;MAAE,GAAGqQ,GAAG;MAAE,CAACrQ,EAAE,GAAG;IAAU,CAAC,CAAC,EAAE,CAAC,CAAC;EAC9E,CAAC,CAAC,CAAC;EACH,MAAMsQ,WAAW,GAAGJ,mBAAmB,CAAC7M,GAAG,CAAErD,EAAE,IAAK;IAClD,MAAMgC,SAAS,GAAGX,WAAW,CAAC6M,YAAY,CAAClO,EAAE,CAAC;IAC9C,MAAMkC,SAAS,GAAGb,WAAW,CAACc,YAAY,CAACH,SAAS,CAAC;IACrD,MAAM3B,IAAI,GAAGgB,WAAW,CAACoL,QAAQ,CAACzM,EAAE,CAAC;IACrC,OAAO;MAAEA,EAAE;MAAEgC,SAAS;MAAEE,SAAS;MAAE7B;IAAK,CAAC;EAC3C,CAAC,CAAC;EACF,MAAM8I,aAAa,GAAGH,IAAI,CAACvH,GAAG,CAAC,eAAe,CAAC;EAC/C,MAAM8O,YAAY,GAAGpP,IAAI,CAAC,cAAc,CAAC;EACzCtC,MAAM,CAAC0R,YAAY,EAAE,MAAM,mEAAmE,CAAC;EAC/F,MAAMC,KAAK,GAAGF,WAAW,CAACjN,GAAG,CAAC,CAAC;IAAErD,EAAE;IAAEgC,SAAS;IAAEE,SAAS;IAAE7B;EAAK,CAAC,KAAK;IACpE,MAAMoQ,aAAa,GAAGtH,aAAa,CAAC1H,GAAG,CAACzB,EAAE,CAAC;IAC3C,IAAIyQ,aAAa,EAAE;MACjBA,aAAa,CAACnB,KAAK,CAAC,CAAC;MACrBnG,aAAa,CAAC2F,MAAM,CAAC9O,EAAE,CAAC;IAC1B;IACA,MAAM0Q,eAAe,GAAG,IAAIC,eAAe,CAAC,CAAC;IAC7CxH,aAAa,CAAC0B,GAAG,CAAC7K,EAAE,EAAE0Q,eAAe,CAAC;IACtC,OAAOH,YAAY,CAAC;MAClBrO,SAAS;MACTF,SAAS;MACT3B,IAAI;MACJuQ,MAAM,EAAEF,eAAe,CAACE;IAC1B,CAAC,CAAC;EACJ,CAAC,CAAC;EACFC,OAAO,CAACC,UAAU,CAACN,KAAK,CAAC,CAACO,IAAI,CAAEC,OAAO,IAAK;IAC1C,MAAMC,aAAa,GAAG,EAAE;IACxB,MAAMC,iBAAiB,GAAGlQ,OAAO,CAACS,GAAG,CAAC,eAAe,CAAC;IACtD,IAAI0P,WAAW,GAAGhQ,IAAI,CAAC,YAAY,CAAC;IACpC6P,OAAO,CAACvC,OAAO,CAAC,CAAC2C,MAAM,EAAEC,KAAK,KAAK;MACjC,MAAM;QAAErR,EAAE;QAAEgC,SAAS;QAAE3B;MAAK,CAAC,GAAGiQ,WAAW,CAACe,KAAK,CAAC;MAClD,IAAID,MAAM,CAACE,MAAM,KAAK,WAAW,EAAE;QACjCJ,iBAAiB,CAAClR,EAAE,CAAC,GAAG,QAAQ;QAChCiR,aAAa,CAACpH,IAAI,CAAC7J,EAAE,CAAC;QACtBmR,WAAW,GAAGA,WAAW,CAACI,OAAO,CAACvP,SAAS,EAAE;UAAE,GAAG3B,IAAI;UAAEZ,QAAQ,EAAE2R,MAAM,CAAChR;QAAM,CAAC,CAAC;MACnF,CAAC,MAAM;QACL+I,aAAa,CAAC2F,MAAM,CAAC9O,EAAE,CAAC;QACxBwR,OAAO,CAACC,cAAc,CAACP,iBAAiB,EAAElR,EAAE,CAAC;MAC/C;IACF,CAAC,CAAC;IACFgB,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAEqG,iBAAiB,CAAC;IAC/C,IAAID,aAAa,CAACrO,MAAM,EAAE;MACxB5B,OAAO,CAAC6J,GAAG,CAAC,eAAe,EAAGC,IAAI,IAAKzM,IAAI,CAACO,GAAG,CAACkM,IAAI,EAAE,GAAGmG,aAAa,CAAC,CAAC,CAAC;MACzE9P,IAAI,CAAC,wBAAwB,CAAC,GAAG;QAAE9B,UAAU,EAAE8R;MAAY,CAAC,CAAC;IAC/D;EACF,CAAC,CAAC;AACJ;AACA,IAAI9I,KAAK,GAAGpJ,WAAW,CAAC,CAAC,CAAC,CACxB,KAAK,EACL,YAAY,EACZ,KAAK,EACL,eAAe,EACf,eAAe,EACf,cAAc,EACd,aAAa,EACb,IAAI,EACJ,kBAAkB,EAClB,eAAe,EACf,mBAAmB,EACnB,eAAe,EACf,eAAe,EACf,WAAW,EACX,sBAAsB,EACtB,sBAAsB,EACtB,wBAAwB,EACxB,cAAc,CACf,CAAC;AACF,IAAIyS,UAAU,GAAG5S,gBAAgB,CAACuJ,KAAK,CAAC;AACxC,IAAIsJ,SAAS,GAAG1S,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AACpD,IAAI2S,cAAc,GAAG9S,gBAAgB,CAAC6S,SAAS,CAAC;AAEhD,SAASzS,OAAO,EAAEG,UAAU,EAAEwB,OAAO,EAAEnB,kBAAkB,EAAEiS,SAAS,EAAEvJ,OAAO,EAAEC,KAAK,EAAEuJ,cAAc,EAAEF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}